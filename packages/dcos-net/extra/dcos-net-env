#!/bin/bash

APP_NAME=dcos-net
NODE_NAME=navstar

# Export
for ENV_FILE in \
        "/opt/mesosphere/etc/epmd.env" \
        "/opt/mesosphere/environment" \
        "/opt/mesosphere/etc/dns_config" \
        "/opt/mesosphere/etc/dns_search_config"; \
    do
    source "${ENV_FILE}" || exit 1
done

for ENV_FILE in \
        "/opt/mesosphere/etc/dns_config_master" \
        "/opt/mesosphere/etc/${APP_NAME}.env" \
        "/run/dcos/etc/${APP_NAME}_auth.env"; \
    do
    if [ -f "${ENV_FILE}" ]; then
        source "${ENV_FILE}"
    fi
done

### Usage
for cmd in 'console' 'foreground' 'console_clean' 'console_boot'; do
    # TODO Move it to dcos-net config
    if [ "$1" == "${cmd}" ]; then
        KNOWNCMD=true
        source "/opt/mesosphere/etc/${APP_NAME}-erl.env" || exit 1
    fi
done
for cmd in 'pid' 'ping' 'remote_console' 'rpc' 'rpcterms' 'eval' 'status'; do
    [ "$1" == "${cmd}" ] && KNOWNCMD=true
done
if [ -z "${KNOWNCMD}" ]; then
    printf "Usage: %s %s%s\n" $0 \
        "{console|foreground|console_clean|console_boot" \
        "|pid|ping|remote_console|rpc|rpcterms|eval|status}" >&2
    exit 1
fi

### Functions

function detect_ip() {
    IP=$(/opt/mesosphere/bin/detect_ip)
    IPFILE="/var/lib/dcos/${NODE_NAME}/ip"
    read -r -d '' EVALCODE <<- EOM
        case inet:parse_ipv4strict_address("$(printf '%q' ${IP})") of
            {ok, _} -> halt(1);
            {error, _} -> halt(0)
        end.
EOM
    if /opt/mesosphere/bin/erl -noinput -eval "${EVALCODE}"; then
        echo "Bad IP address: ${IP}" >&2
        exit 1
    fi
    if [ -f "${IPFILE}" ]; then
        OLD_IP=$(cat ${IPFILE})
        if [ "${OLD_IP}" != "${IP}" ]; then
            echo "ERROR: IP address was changed ${OLD_IP} -> ${IP}" >&2
            exit 1
        fi
    else
        echo -n "${IP}" > "${IPFILE}"
    fi
    echo "${IP}"
}

function check_epmd() {
    if ! /opt/mesosphere/bin/epmd -port ${ERL_EPMD_PORT} -names > /dev/null; then
        echo "EPMD is not reachable at port \"${ERL_EPMD_PORT}\"" >&2
        exit 1;
    fi
    APP_PORT=$(/opt/mesosphere/bin/epmd -port ${ERL_EPMD_PORT} -names | \
             awk "{if (\$2 == \"${NODE_NAME}\") print \$5}")
    if [ "${APP_PORT}" ]; then
        read -r -d '' EVALCODE <<- EOM
            case gen_tcp:connect({127, 0, 0, 1}, ${APP_PORT}, [], 1000) of
                {ok, S} -> gen_tcp:close(S), halt(1);
                {error, Error} -> halt(0)
            end.
EOM
        if /opt/mesosphere/bin/erl -noinput -eval "${EVALCODE}"; then
            /opt/mesosphere/bin/epmd -port ${ERL_EPMD_PORT} -stop ${NODE_NAME}
        fi
    fi
}

### SSL / Distributed Erlang config
if [ "${ERLANG_DISTRIBUTION}" == "inet_tls" ]; then
    for FILE in ${CLIENT_CACERTFILE} ${CLIENT_KEYFILE} ${CLIENT_CERTFILE} \
                ${SERVER_CACERTFILE} ${SERVER_KEYFILE} ${SERVER_CERTFILE}; do
        if [ ! -r ${FILE} ]; then
            echo "${FILE}: doesn't exists or is not readable" >&2
            exit 1
        fi
    done
    ERL_FLAGS="${ERL_FLAGS} -proto_dist ${ERLANG_DISTRIBUTION}"
    ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt client_cacertfile ${CLIENT_CACERTFILE}"
    ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt client_keyfile ${CLIENT_KEYFILE}"
    ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt client_certfile ${CLIENT_CERTFILE}"
    ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt client_verify ${CLIENT_VERIFY:-true}"
    ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt client_depth ${CLIENT_DEPTH:-10}"
    ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt server_cacertfile ${SERVER_CACERTFILE}"
    ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt server_keyfile ${SERVER_KEYFILE}"
    ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt server_certfile ${SERVER_CERTFILE}"
    ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt server_verify ${SERVER_VERIFY:-true}"
    ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt server_fail_if_no_peer_cert"
    ERL_FLAGS="${ERL_FLAGS} ${SERVER_FAIL_IF_NO_PEER_CERT:-verify_peer}"
    ERL_FLAGS="${ERL_FLAGS} -ssl_dist_opt server_depth ${SERVER_DEPTH:-10}"
fi

### Mesos state SSL config
export MESOS_STATE_SSL_ENABLED
if [ "${MESOS_STATE_SSL_ENABLED}" == "true" ]; then
    ERL_FLAGS="${ERL_FLAGS} -mesos_state ssl ${MESOS_STATE_SSL_ENABLED}"
fi

### EPMD
ERL_FLAGS="${ERL_FLAGS} -start_epmd false"
check_epmd

### Export Erlang configuration
export ERL_FLAGS
export ERL_EPMD_PORT

### Export relx configuration
export RELX_REPLACE_OS_VARS=true
export RELX_OUT_FILE_PATH=${HOME}

### Export dns configuration
export MASTER_SOURCE
export EXHIBITOR_URI
export EXHIBITOR_ADDRESS

### Node configuration
IP=$(detect_ip)
export NAME=${NODE_NAME}@${IP}

### Set application name
export ESCRIPT_NAME=/opt/mesosphere/active/${APP_NAME}

### Set script
if [ -z "${DCOS_NET_ENV_CMD}" ]; then
    DCOS_NET_ENV_CMD="/opt/mesosphere/active/${APP_NAME}/${APP_NAME}/bin/${APP_NAME}"
fi

exec "${DCOS_NET_ENV_CMD}" "$@" || exit 1
