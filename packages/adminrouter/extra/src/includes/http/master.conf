# Without this, cosocket-based code in worker initialization cannot
# resolve ``leader.mesos``.
#
# The value for this is a bit of a compromise:
# * In the case of upstreams defined using DNS (like e.g. /mesos), we can't
#   override DNS validity period with a value higher than the TTL set originally
#   by mesos_dns. This gives us 60s upper limit.
#
# * As for the tests, the lower the better, with TTL=1 being the reasonable
#   minimum.
#
# * As for the Lua code - this is a place where stuff starts to be interesting.
#   Currently CACHE_POLL_PERIOD = 25 seconds, we also want to be sure that
#   leader.mesos will be re-resolved on every cache refresh, so max TTL of any
#   DNS entry should be lower than 25s.
#
# Soon one hand, we should not be using default TTL provided by the MesosDNS
# as it is too high, on the other hand, we should not query MesosDNS too often.
# Five seconds seems like a reasonable value and this shouldn't slow down our
# tests too much.
resolver 127.0.0.1:61053 valid=5s ipv6=off;

lua_shared_dict cache 100m;
lua_shared_dict shmlocks 100k;
init_worker_by_lua '
    cache.periodically_refresh_cache()
';

# Name: DC/OS Metrics
# Reference: https://docs.mesosphere.com/1.12/metrics/metrics-api/
upstream metrics {
    server unix:/run/dcos/telegraf-dcos-metrics.sock;
}

# Name: Mesos DNS
# Reference: https://docs.mesosphere.com/1.12/networking/DNS/mesos-dns/mesos-dns-api/
upstream mesos_dns {
    server 127.0.0.1:8123;
}

# Name: Exhibitor (Zookeeper)
# Reference: https://github.com/soabase/exhibitor/wiki/REST-Introduction
upstream exhibitor {
    server 127.0.0.1:8181;
}

# Name: DC/OS Net
upstream dcos_net {
    server 127.0.0.1:62080;
}

# Name: DC/OS UI Update Service
upstream dcos_ui_update_service {
    server unix:/run/dcos/dcos-ui-update-service.sock;
}

# Name: DC/OS Authentication (OAuth)
# Reference: https://docs.mesosphere.com/1.12/security/ent/iam-api/
upstream iam {
    server 127.0.0.1:8101;
}
