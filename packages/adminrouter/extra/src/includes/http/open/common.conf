init_by_lua_block {
    util = require "util"

    DEFAULT_SCHEME = os.getenv("DEFAULT_SCHEME")
    if DEFAULT_SCHEME == nil then
        DEFAULT_SCHEME = "http://"
    end
    ngx.log(ngx.NOTICE, "Default scheme: " .. DEFAULT_SCHEME)

    HOST_IP = os.getenv("HOST_IP")
    if HOST_IP == nil or util.verify_ip(HOST_IP) == false then
        if HOST_IP ~= nil then
            ngx.log(ngx.ERR, "HOST_IP var is not a valid ipv4: " .. HOST_IP)
        end
        -- This will cause Lua logic to always respond with 5XX status to the
        -- requests that rely on this variable.
        HOST_IP = "unknown"
    end
    ngx.log(ngx.NOTICE, "Local Mesos Master IP: " .. HOST_IP)

    UPSTREAM_MESOS = os.getenv("UPSTREAM_MESOS")
    if UPSTREAM_MESOS == nil then
        UPSTREAM_MESOS = "http://leader.mesos:5050"
    end
    ngx.log(ngx.NOTICE, "Mesos upstream: " .. UPSTREAM_MESOS)

    UPSTREAM_MARATHON = os.getenv("UPSTREAM_MARATHON")
    if UPSTREAM_MARATHON == nil then
        UPSTREAM_MARATHON = "http://127.0.0.1:8080"
    end
    ngx.log(ngx.NOTICE, "Marathon upstream: " .. UPSTREAM_MARATHON)

    -- Initialize modules:
    cache = require "cache".init(nil);
    service = require "service".init();
    mleader = require "marathon-leader".init();
    agent = require "agent".init();
    historyservice = require "history-service".init();
    -- Loading the auth module in the global Lua VM in the master process is a
    -- requirement, so that reading the secret is executed under the user that
    -- spawns the master process instead of 'nobody' (which workers operate
    -- under).
    auth = require "auth.open".init(os.getenv("ADMINROUTER_ACTIVATE_AUTH_MODULE"));
}
