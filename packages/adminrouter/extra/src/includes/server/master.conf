# Group: Status
# Description: Virtual host traffic JavaScript output
location /nginx/status {
    vhost_traffic_status_display;
    vhost_traffic_status_display_format html;
}

# Group: Pkgpanda
# Description: List the active Pkgpanda packages
location /pkgpanda/active.buildinfo.full.json {
    access_by_lua_block {
        auth.access_misc_metadata_endpoint();
    }
    include includes/disable-response_caching.conf;
    alias /opt/mesosphere/active.buildinfo.full.json;
}

# Group: Root
# Description: DC/OS GUI
root /var/lib/dcos/dcos-ui-update-service/dist/ui;

location / {
    # Frequently check the cache freshness of the top-level file to ensure the
    # user sees an updated UI.
    expires 30s;
    # Include appropriate security headers.
    include /opt/mesosphere/etc/adminrouter-ui-security.conf;
}

location /assets {
    # The UI asset filenames are hashed by content. Hence, they can be cached
    # by the client indefinitely. Currently, we use a more conservative value.
    expires 2d;
    # Some UI assets are pre-compressed. Serve these compressed if the client
    # accepts gzip encoding.
    gzip_static on;
    # Add a "Vary: Accept-Encoding" header to the response to ensure that
    # a cached gzip file does not get returned to a client that does not
    # set "Accept-Encoding: gzip".
    gzip_vary on;
    # Send compressed file even for proxied connections. The use of a
    # "Vary: Accept-Encoding" header should prevent clients mixing compressed
    # and uncompressed files. However, multiple copies of the compressed file
    # may be cached, if some clients use "Accept-Encoding: gzip, deflate" and
    # others use "Accept-Encoding: deflate, gzip" for example.
    gzip_proxied any;
    # IE6 shouldn't be very common, and later versions support gzip, but let's
    # be conservative.
    gzip_disable "msie6";
}

# Group: System
# Description: System proxy to the master node with the Mesos leader
location ~ ^/system/v1/leader/mesos(?<url>.*)$ {
    access_by_lua_block {
        auth.access_system_mesosleader_endpoint();
        util.clear_dcos_cookies();
    }

    include includes/http-11.conf;
    include includes/proxy-headers.conf;

    # Please check README.md, DNS section for reasoning behind it.
    set $system_v1_leader_mesos "http://leader.mesos/system/v1$url$is_args$query_string";
    proxy_pass $system_v1_leader_mesos;
}

# Group: System
# Description: System proxy to the master node with the Marathon leader
location ~ ^/system/v1/leader/marathon(?<url>.*)$ {
    set $leader_host '';
    rewrite_by_lua_block {
        auth.access_system_marathonleader_endpoint();
        util.set_leader_host("marathon", init.DEFAULT_SCHEME .. init.HOST_IP, nil);
        util.clear_dcos_cookies();
    }

    include includes/http-11.conf;
    include includes/proxy-headers.conf;
    proxy_pass $leader_host/system/v1$url$is_args$query_string;
}

# Group: System
# Description: System proxy to a specific agent node
location ~ ^/system/v1/agent/(?<agentid>[0-9a-zA-Z-]+)(?<url>/logs.*|/metrics/v0.*|/dcos-metadata/dcos-version.json|/nginx/metrics)$ {
    set $agentaddr '';
    rewrite_by_lua_block {
        auth.access_system_agent_endpoint();
        agent.resolve();
        util.clear_dcos_cookies();
    }
    rewrite ^/system/v1/agent/[0-9a-zA-Z-]+/(logs.*|metrics/v0.*) /system/v1$url break;
    rewrite ^/system/v1/agent/[0-9a-zA-Z-]+/dcos-metadata/dcos-version.json /dcos-metadata/dcos-version.json break;
    rewrite ^/system/v1/agent/[0-9a-zA-Z-]+/nginx/metrics /nginx/metrics break;

    more_clear_input_headers Accept-Encoding;
    include includes/http-11.conf;
    include includes/proxy-headers.conf;
    proxy_pass $agentaddr:$adminrouter_agent_port;
}

# Group: System
# Description: Node and cluster checks
location /system/checks/v1 {
    # Annotation for DCOS Checks upstream metrics.
    set $upstream_tag DCOSChecks;
    set $original_uri $uri;
    include includes/metrics-upstream-location-level.conf;

    access_by_lua_block {
        auth.access_system_checks_endpoint();
        util.clear_dcos_cookies();
    }

    include includes/proxy-headers.conf;
    proxy_set_header Authorization "";

    proxy_pass http://dcos_checks_api;
}

# Group: Mesos DNS
# Description: Domain-based service discovery
location /mesos_dns/ {
    # Annotation for MesosDNS upstream metrics.
    set $upstream_tag MesosDNS;
    set $original_uri $uri;
    include includes/metrics-upstream-location-level.conf;

    access_by_lua_block {
        auth.access_mesosdns_endpoint();
        util.clear_dcos_cookies();
    }
    include includes/proxy-headers.conf;
    proxy_set_header Authorization "";

    proxy_pass http://mesos_dns/;
}

location /internal/mesos_dns/ {
    # Annotation for MesosDNS upstream metrics.
    set $upstream_tag MesosDNS;
    set $original_uri $uri;
    include includes/metrics-upstream-location-level.conf;

    # This location is meant to be used internally in order to resolve
    # MesosDNS SRV records:
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#internal
    internal;

    # Do not send original request headers upstream, see
    # https://github.com/openresty/lua-nginx-module#ngxlocationcapture
    proxy_pass_request_headers off;
    proxy_set_header User-Agent "Master Admin Router";

    include includes/proxy-headers.conf;

    # On average case, maximum time user is willing to wait for
    # response is around 5s. Basing on that these timeouts were chosen.
    proxy_connect_timeout 2s;
    proxy_read_timeout 3s;

    proxy_pass http://mesos_dns/;
}

# Group: Marathon
# Description: Redirect to add trailing slash
# Deprecated: Use `/service/marathon/`
# Visibility: hidden
## See https://jira.mesosphere.com/browse/DCOS_OSS-1163 for more context
location = /marathon {
    return 307 /marathon/$is_args$args;
}

# Group: Marathon
# Deprecated: Use `/service/marathon/`
location /marathon/ {
    rewrite ^/marathon/(.*)$ /service/marathon/$1 last;
}

# Group: Metadata
# Description: Public IP and Cluster ID
location /metadata {
    access_by_lua_block {
        auth.access_metadata_endpoint();
    }
    content_by_lua_file conf/lib/metadata.lua;
}

# Group: Service
# Description: Redirect to add trailing slash
# Visibility: hidden
location ~ ^/service/(?<serviceid>[0-9a-zA-Z-.]+)$ {
    # Append slash and 301-redirect.
    rewrite ^/service/(.*)$ /service/$1/ permanent;
}

# Group: Service
# Description: Proxy to services running on DC/OS
location ~ ^/service/(?<service_path>.+) {
    # These vars are set internally, by service.recursive_resolve() and passed
    # over to internal `@service_*` blocks.
    set $upstream_url '';
    set $upstream_scheme '';
    set $service_realpath '';
    set $service_tag '';
    set $original_uri $uri;

    # Give services a lot of leeway. A particular extreme is for uploading
    # packages to a package registry. The data-science-engine package is one
    # of our largest at over 16GB. Use 32GB as the limit to allow for this to
    # expand.
    client_max_body_size 32768m;

    rewrite_by_lua_block {
        local service_name

        -- Acquire cache data:
        -- On one hand we want to fetch cache only once no matter the number of
        -- resolving attempts, on the other hand - we want to treat each cache
        -- entry independently. If i.e. Root Marathon is fine but Mesos Master
        -- is not, and the resolving given /service request requires only Root
        -- Marathon data, we should still route the request. This is the reason
        -- why error checking is done in a different place than actually
        -- fetching the cache data. The case when Root Marathon is broken but
        -- Mesos is fine is different - here the request must not be handled as
        -- AR can't be sure if the request could have been handled using Root
        -- Marathon data or not (i.e. there are strict priorities).
        local marathon_cache = cache.get_cache_entry("svcapps")
        local mesos_cache = cache.get_cache_entry("mesosstate")

        -- Auth is done during recursive_resolve stage, here we only
        -- pass the module. Also see the comment about ngx vars at the begining
        -- of this location block.
        -- TODO (prozlach): not sure if passing auth during init wouldn't
        -- be cleaner. On the other hand passing it here is more explicit.
        service_name = service.recursive_resolve(auth, ngx.var.service_path, marathon_cache, mesos_cache);

        ngx.var.service_tag = service_name

        util.clear_dcos_cookies();

        -- A hack to enable the control of proxy_request_buffering via Marathon
        -- labels. The proxy_request_buffering directive by itself is unable to
        -- parse lua variables directly.
        if service.request_buffering_required(service_name, marathon_cache) == false then
            -- Do an internal redirect; proceed handling this request in the
            -- @service_requnbuffered location block below.
            return ngx.exec("@service_requnbuffered");
        end

        -- Do an internal redirect; proceed handling this request in the
        -- @service_default location block below.
        return ngx.exec("@service_default");
    }
}

location @service_requnbuffered {
    proxy_request_buffering off;

    # It takes 3-4 minutes for the DC/OS package registry to validate a 10GB
    # package and respond. We relax the read timeout for all unbuffered
    # services to handle this.
    proxy_read_timeout 600s;

    include includes/metrics-service-location-level.conf;
    include includes/service-location.common.conf;
}

location @service_default {

    include includes/metrics-service-location-level.conf;
    include includes/service-location.common.conf;
}

# Group: Agent
# Description: Redirect to add trailing slash
# Visibility: hidden
location ~ ^/(slave|agent)/(?<agentid>[0-9a-zA-Z-]+)$ {
    # Append slash and perform internal redirect.
    rewrite ^/(slave|agent)/(.*)$ /agent/$2/ last;
}

# Group: Agent
# Description: API proxy to a specific agent node
location ~ ^/(slave|agent)/(?<agentid>[0-9a-zA-Z-]+)(?<url>.+)$ {
    set $agentaddr '';
    set $agentport '';
    rewrite ^/(slave|agent)/[0-9a-zA-Z-]+/.*$ $url break;
    rewrite_by_lua_block {
        auth.access_agent_endpoint();
        agent.resolve();
        util.clear_dcos_cookies();
    }

    more_clear_input_headers Accept-Encoding;
    include includes/proxy-headers.conf;
    # Non-streaming endpoints don't require HTTP/1.1 but will work as
    # expected with it enabled. Streaming endpoints require chunked encoding
    # functionality added in HTTP/1.1. As such, we enable HTTP/1.1 here
    # while maintaining backwards compatibility.
    include includes/http-11.conf;
    # Disable buffering to support streaming endpoints
    include includes/disable-request-response-buffering.conf;

    # For the reasons stated in
    # https://jira.mesosphere.com/browse/DCOS-42098
    # we want to make Master Admin Router emit a 'Connection: close' header value.
    # We use 'keepalive_timeout 0;' technique to do that.
    # See https://forum.nginx.org/read.php?2,251560,251570

    # Setting the 'Connection: close' header value in the HTTP response
    # instructs the client to cease sending requests on the same TCP
    # connection, and to close the connection after reading the response
    # (see https://tools.ietf.org/html/rfc7230#section-6.6).
    #
    # When the response is a streaming response (a response that does
    # not have a defined end) setting this header value is important for
    # signaling downstream HTTP proxies that they have to close the
    # TCP connection when their own client went away).

    keepalive_timeout 0;

    proxy_pass $agentaddr:$agentport;
}

# Group: DC/OS Net
location /navstar/lashup/key {
    # Annotation for DC/OS Net upstream metrics.
    set $upstream_tag DCOSNet;
    set $original_uri $uri;
    include includes/metrics-upstream-location-level.conf;

    access_by_lua_block {
        auth.access_lashupkey_endpoint();
        util.clear_dcos_cookies();
    }
    include includes/proxy-headers.conf;

    proxy_pass http://dcos_net/lashup/key;
}

# Group: DC/OS Net
location /net/ {
    # Annotation for DC/OS Net upstream metrics.
    set $upstream_tag DCOSNet;
    set $original_uri $uri;
    include includes/metrics-upstream-location-level.conf;

    access_by_lua_block {
        auth.access_net_endpoint();
        util.clear_dcos_cookies();
    }
    include includes/proxy-headers.conf;
    proxy_set_header Authorization "";

    proxy_pass http://dcos_net/;
}

# Group: Mesos
# Description: Apache Mesos
location /mesos/ {
    # Annotation for Mesos upstream metrics.
    set $upstream_tag Mesos;
    set $original_uri $uri;
    include includes/metrics-upstream-location-level.conf;

    access_by_lua_block {
        auth.access_mesos_endpoint();
        util.clear_dcos_cookies();
    }

    # Non-streaming endpoints don't require HTTP/1.1 but will work as
    # expected with it enabled. Streaming endpoints require chunked encoding
    # functionality added in HTTP/1.1. As such, we enable HTTP/1.1 here
    # while maintaining backwards compatibility.
    include includes/http-11.conf;
    # Disable buffering to support streaming Mesos v1 streaming API:
    proxy_buffering off;

    # For the reasons stated in
    # https://jira.mesosphere.com/browse/DCOS-42098
    # we want to make Master Admin Router emit a 'Connection: close' header value.
    # We use 'keepalive_timeout 0;' technique to do that.
    # See https://forum.nginx.org/read.php?2,251560,251570

    # Setting the 'Connection: close' header value in the HTTP response
    # instructs the client to cease sending requests on the same TCP
    # connection, and to close the connection after reading the response
    # (see https://tools.ietf.org/html/rfc7230#section-6.6).
    #
    # When the response is a streaming response (a response that does
    # not have a defined end) setting this header value is important for
    # signaling downstream HTTP proxies that they have to close the
    # TCP connection when their own client went away).

    keepalive_timeout 0;

    include includes/proxy-headers.conf;
    rewrite ^/mesos/(.*) /$1 break;
    proxy_pass $upstream_mesos;
}

# Group: Cosmos
# Description: Start a DC/OS service from a DC/OS package
location /cosmos/service/ {
    # Annotation for Cosmos upstream metrics.
    set $upstream_tag Cosmos;
    set $original_uri $uri;
    include includes/metrics-upstream-location-level.conf;

    access_by_lua_block {
        auth.access_cosmosservice_endpoint();
        util.clear_dcos_cookies();
    }
    include includes/proxy-headers.conf;
    include includes/http-11.conf;

    rewrite ^/cosmos/(.*) /$1 break;
    proxy_pass $upstream_cosmos;
}

# Group: Package
# Description: Package Management
location ~ ^/package/(?<package_path>.*) {
    # Annotation for Cosmos upstream metrics.
    set $upstream_tag Cosmos;
    set $original_uri $uri;
    include includes/metrics-upstream-location-level.conf;

    access_by_lua_block {
        auth.access_package_endpoint(ngx.var.package_path);
        util.clear_dcos_cookies();
    }
    include includes/proxy-headers.conf;
    include includes/disable-request-response-buffering.conf;
    include includes/http-11.conf;

    # Cosmos buffers the entire package before sending a large download.  On
    # slow networks, this can lead to AdminRouter timing-out the connection.
    # Increase timeouts from default 60s to make package download more robust.
    # See https://jira.mesosphere.com/browse/DCOS_OSS-3639 for potential
    # improvement to Cosmos.
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    proxy_pass $upstream_cosmos;
}

# Group: Capabilities
# Description: List of capabilities supported by DC/OS
location /capabilities {
    # Annotation for Cosmos upstream metrics.
    set $upstream_tag Cosmos;
    set $original_uri $uri;
    include includes/metrics-upstream-location-level.conf;

    access_by_lua_block {
        auth.access_capabilities_endpoint();
        util.clear_dcos_cookies();
    }
    include includes/proxy-headers.conf;
    include includes/http-11.conf;

    proxy_pass $upstream_cosmos;
}

# Group: Authentication
# Description: Access Control Service
location /acs/api/v1 {
    # Annotation for IAM upstream metrics.
    set $upstream_tag IAM;
    set $original_uri $uri;
    include includes/metrics-upstream-location-level.conf;

    # Enforce access restriction to Auth API. Due to the fact that we need to
    # issue a subrequest in auth.access_acsapi_endpoint(), this block needs to
    # be access_by_lua_block instead of rewrite_by_lua_block
    access_by_lua_block {
        auth.access_acsapi_endpoint();
        util.clear_dcos_cookies();
    }
    include includes/proxy-headers.conf;
    include includes/disable-response_caching.conf;

    proxy_pass http://iam;
}

# Group: DC/OS UI Update Service
# Description: DC/OS UI Update Service Version API
location = /dcos-ui-update-service/api/v1/version/ {
    # Annotation for DC/OS UI Update Service upstream metrics.
    set $upstream_tag DCOSUIUpdateService;
    set $original_uri $uri;
    include includes/metrics-upstream-location-level.conf;

    access_by_lua_block {
        auth.access_dcos_ui_update_service_version_api_endpoint();
        util.clear_dcos_cookies();
    }

    include includes/http-11.conf;
    include includes/proxy-headers.conf;

    proxy_pass "http://dcos_ui_update_service/api/v1/version/$is_args$query_string";
}

# Group: DC/OS UI Update Service
# Description: DC/OS UI Update Service API
location ~ ^/dcos-ui-update-service/api/(?<api_path>.*)$ {
    # Annotation for DC/OS UI Update Service upstream metrics.
    set $upstream_tag DCOSUIUpdateService;
    set $original_uri $uri;
    include includes/metrics-upstream-location-level.conf;

    access_by_lua_block {
        auth.access_dcos_ui_update_service_api_endpoint();
        util.clear_dcos_cookies();
    }

    include includes/http-11.conf;
    include includes/proxy-headers.conf;

    set $dcos_ui_update_service "http://dcos_ui_update_service/api/$api_path$is_args$query_string";
    proxy_pass $dcos_ui_update_service;
}
