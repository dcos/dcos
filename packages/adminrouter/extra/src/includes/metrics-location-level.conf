# Output fine-grained location directive level metrics using the VTS module.
#
# Caution:
# A request which matches a location that has a VTS module filter defined will be
# counted on the Nginx location directive level filter but it will not be counted
# on a filter defined on the server directive level that it matches as well.
#
# The following filter expects a $upstream_tag to be set before importing in order to
# identify the upstream that the metrics belong to. This constitutes a mechanism to
# annotate the Admin Router config, allowing one to collect metrics of dynamically
# resolved upstreams on the fly. It is also the name that will show up in Grafana when
# referring to a particular upstream. Grouping metrics based on upstream would normally
# only be possible with Nginx Plus because only then they can be defined in a upstream
# directive and continue to be dynamically resolved.
# https://tenzer.dk/nginx-with-dynamic-upstreams/
#
# Before including this file, a Nginx variable $upstream_tag must be set like this:
# set $upstream_tag <CUSTOM_UPSTREAM_TAG>;
#
# Create a counter for every backend that requests go to when passing this line in a location directive.
# Tag the counter with the manually set upstream.
vhost_traffic_status_filter_by_set_key backend:=$upstream_addr upstream:=${upstream_tag};

# Create a counter for every status of requests which matches the location directive that this filter appears in.
# Tag the counter with the manually set upstream and the backend that the request was passed on to.
vhost_traffic_status_filter_by_set_key status:=$status upstream:=${upstream_tag}_._._backend:=${upstream_addr};

# Create a counter for every URI that requests go to when matching the location directive that this filter appears in.
# Tag the counter with the manually set upstream, the backend that the request was passed on to and the resulting status code.
vhost_traffic_status_filter_by_set_key uri:=$uri upstream:=${upstream_tag}_._._backend:=${upstream_addr}_._._status:=${status};

# Create a counter for every user agent that requests were sent from which match the location directive that this filter appears in.
# Tag the counter with the manually set upstream, the backend that the request was passed on to and the resulting status code.
vhost_traffic_status_filter_by_set_key useragent:=$http_user_agent upstream:=${upstream_tag}_._._backend:=${upstream_addr}_._._status:=${status};

# Another thing to keep in mind is the consideration of whether to import this file before
# or after any Lua auth checks.
#
# If this file is imported before a Lua auth check, then requests to unauthorized endpoints are counted at the location directive level but the $upstream_addr value is empty:
# (+) We gain the information for which upstream the denied request was intended.
# (-) We count requests as upstream requests that were not actually forwarded to any upstream.
# (-) Building Grafana graphs for upstreams will be harder because we need to apply additional filters.
#
# If we import it after any Lua auth check, then requests to unauthorized endpoints are counted at the server directive level. This implies:
# (+) We only count requests that actually went to an upstream on the location directive level.
# (+) Building Grafana graphs for upstreams will be simple.
# (+) Building an Admin Router graph that shows all requests to unauthorized endpoints will be simple.
# (-) We lose information about the intended upstream of the denied request.
#
# We choose the second option.
