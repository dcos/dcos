# Output fine-grained location directive level metrics for services using the VTS module.
#
# Caution:
# A request which matches a location that has a VTS module filter defined will be
# counted on the Nginx location directive level filter but it will not be counted
# on a filter defined on the server directive level that it matches as well.
#
# The following filter expects a $service_tag to be set before importing in order to
# identify the service that the metrics belong to. This constitutes a mechanism to
# annotate the Admin Router config, allowing one to collect metrics of dynamically
# resolved services on the fly. It is also the name that will show up in Grafana when
# referring to a particular service.
#
# Before including this file, Nginx variables $service_tag and $original_uri must be set like this:
# set $service_tag <CUSTOM_SERVICE_TAG>;
# set $original_uri <ORIGINAL_URI>;
#
# Create a counter for every backend that requests go to when passing this line in a location directive.
# Tag the counter with the manually set service name.
vhost_traffic_status_filter_by_set_key backend:=$upstream_addr service:=${service_tag};

# Create a counter for every status of requests which matches the location directive that this filter appears in.
# Tag the counter with the manually set service name and the backend that the request was passed on to.
vhost_traffic_status_filter_by_set_key status:=$status service:=${service_tag}_._._backend:=${upstream_addr};

# Create a counter for every URI that requests go to when matching the location directive that this filter appears in.
# Tag the counter with the manually set service name, the backend that the request was passed on to and the resulting status code.
vhost_traffic_status_filter_by_set_key uri:=$original_uri service:=${service_tag}_._._backend:=${upstream_addr}_._._status:=${status};

# Create a counter for every user agent that requests were sent from which match the location directive that this filter appears in.
# Tag the counter with the manually set service name, the backend that the request was passed on to and the resulting status code.
vhost_traffic_status_filter_by_set_key useragent:=$http_user_agent service:=${service_tag}_._._backend:=${upstream_addr}_._._status:=${status};
