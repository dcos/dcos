include includes/main/common.conf;
include includes/main/master.conf;
include includes/main/open/common.conf;

http {
    include includes/http/common.conf;
    include includes/http/master.conf;
    include includes/http/open/common.conf;
    include includes/http/open/master.conf;

    include includes/metrics-http-level.conf;

    server {
        server_name master.mesos leader.mesos;

        ssl_certificate includes/snakeoil.crt;
        ssl_certificate_key includes/snakeoil.key;

        include includes/metrics-server-level.conf;

        include includes/server/common.conf;
        include includes/server/master.conf;
        include includes/server/open/master.conf;

        include /opt/mesosphere/etc/adminrouter-listen-open.conf;
        include /opt/mesosphere/etc/adminrouter-upstreams-open.conf;
        include /opt/mesosphere/etc/adminrouter-tls-master.conf;
    }

    server {
        include /opt/mesosphere/etc/adminrouter-grpc-proxy-port.conf;

        # It is necessary to clean up the authorization header as it collides
        # with the etcd's authn
        grpc_set_header Authorization "";

        # FIXME(prozlach) According to the gRPC protocol specification, the
        # first segment of the request path is the package name of the gRPC
        # service definition. So, once we have more than one gRPC backend, we can
        # narrow this down to only (executed in the  etcd's source directory):
        #
        # $ find . -name '*.proto' | xargs grep -l service\   | xargs grep -h package | cut -d\  -f 2
        # v3electionpb;
        # v3lockpb;
        # etcdserverpb;
        # rpcpb;
        #
        # I am not sure though if we really need all of these though.

        # NOTE(prozlach) Different services can then have their own location
        # blocks with their own package names for gRPC services.
        location / {
            access_by_lua_block {
                auth.access_grpc_etcd_endpoint();
            }

            grpc_pass grpc://127.0.0.1:2379;
       }
    }

}
