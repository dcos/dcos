From 75d30678dab74fbe2e753fbe134459fe8d8fc09b Mon Sep 17 00:00:00 2001
From: Kevin Klues <klueska@gmail.com>
Date: Thu, 9 Feb 2017 19:39:42 -0800
Subject: [PATCH 2/9] Updated mesos containerizer to ignore GPU isolator
 creation failure.

This cherry-pick will be maintained in DC/OS to avoid the problem of
requiring NVML to be installed on *every* node in the cluster, even if
GPUs aren't available on them.

Without this patch, we would need some sort of per-agent configuration
to only enable the GPU isolator on agents that had NVML intstalled on
them, and that is currently difficult (or undesirable) to do in DC/OS
today.

This is a decent compromise.

Cherry-picked and modified from
`a9f5ddb8614ef057537994f389eb7e19f0c85652` due to changes introduced
by https://reviews.apache.org/r/62472/

Signed-off-by: Gilbert Song <songzihao1990@gmail.com>
---
 .../containerizer/mesos/containerizer.cpp     | 20 +++++++++++--------
 1 file changed, 12 insertions(+), 8 deletions(-)

diff --git a/src/slave/containerizer/mesos/containerizer.cpp b/src/slave/containerizer/mesos/containerizer.cpp
index 3c1840cae..cb6189f80 100644
--- a/src/slave/containerizer/mesos/containerizer.cpp
+++ b/src/slave/containerizer/mesos/containerizer.cpp
@@ -492,8 +492,10 @@ Try<MesosContainerizer*> MesosContainerizer::create(
     {"gpu/nvidia",
       [&nvidia] (const Flags& flags) -> Try<Isolator*> {
         if (!nvml::isAvailable()) {
-          return Error("Cannot create the Nvidia GPU isolator:"
-                       " NVML is not available");
+          LOG(ERROR) << "Cannot create the Nvidia GPU isolator:"
+                        " NVML is not available";
+
+          return nullptr;
         }
 
         CHECK_SOME(nvidia)
@@ -553,14 +555,16 @@ Try<MesosContainerizer*> MesosContainerizer::create(
                    _isolator.error());
     }
 
-    Owned<Isolator> isolator(_isolator.get());
+    if (_isolator.get() != nullptr) {
+      Owned<Isolator> isolator(_isolator.get());
 
-    if (futureTracker != nullptr) {
-      isolator = Owned<Isolator>(
-          new IsolatorTracker(isolator, creator.first, futureTracker));
-    }
+      if (futureTracker != nullptr) {
+        isolator = Owned<Isolator>(
+            new IsolatorTracker(isolator, creator.first, futureTracker));
+      }
 
-    isolators.push_back(isolator);
+      isolators.push_back(isolator);
+    }
   }
 
   // Next, apply any custom isolators in the order given by the flags.
-- 
2.25.1

