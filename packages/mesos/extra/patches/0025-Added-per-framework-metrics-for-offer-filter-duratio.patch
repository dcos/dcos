From 690e2223543359c5f101496c255df6a18255533a Mon Sep 17 00:00:00 2001
From: Greg Mann <greg@mesosphere.io>
Date: Fri, 6 Jul 2018 11:35:11 -0700
Subject: [PATCH] Added per-framework metrics for offer filter durations.

These per-framework metrics provide counts of the numbers
of filters set by each framework, bucketed according to
the 'refuse_seconds' duration.

Review: https://reviews.apache.org/r/66842/
---
 src/master/master.cpp  |  2 ++
 src/master/metrics.cpp | 44 +++++++++++++++++++++++++++++++++++++++++++-
 src/master/metrics.hpp |  9 +++++++++
 3 files changed, 54 insertions(+), 1 deletion(-)

diff --git a/src/master/master.cpp b/src/master/master.cpp
index 1fe3869b6..53cd5b4b8 100644
--- a/src/master/master.cpp
+++ b/src/master/master.cpp
@@ -5212,6 +5212,8 @@ void Master::decline(
       removeOffer(offer);
 
       offersDeclined++;
+      framework->metrics.incrementOfferFilterBuckets(
+          Seconds(decline.filters().refuse_seconds()));
       continue;
     }
 
diff --git a/src/master/metrics.cpp b/src/master/metrics.cpp
index d32bf04df..5f98b27fc 100644
--- a/src/master/metrics.cpp
+++ b/src/master/metrics.cpp
@@ -21,6 +21,7 @@
 #include <process/metrics/push_gauge.hpp>
 #include <process/metrics/metrics.hpp>
 
+#include <stout/duration.hpp>
 #include <stout/foreach.hpp>
 
 #include "master/master.hpp"
@@ -529,7 +530,23 @@ FrameworkMetrics::FrameworkMetrics(const FrameworkInfo& _frameworkInfo)
     offers_rescinded(
         getFrameworkMetricPrefix(frameworkInfo) + "offers/rescinded"),
     operations(
-        getFrameworkMetricPrefix(frameworkInfo) + "operations")
+        getFrameworkMetricPrefix(frameworkInfo) + "operations"),
+    refuse_seconds_infinite(
+        getFrameworkMetricPrefix(frameworkInfo) +
+          "allocation/offer_filters/refuse_seconds/infinite"),
+    refuseSecondsBuckets(
+        {{Seconds(5),
+          Counter(getFrameworkMetricPrefix(frameworkInfo) +
+              "allocation/offer_filters/refuse_seconds/5secs")},
+         {Minutes(1),
+          Counter(getFrameworkMetricPrefix(frameworkInfo) +
+              "allocation/offer_filters/refuse_seconds/1min")},
+         {Hours(1),
+          Counter(getFrameworkMetricPrefix(frameworkInfo) +
+              "allocation/offer_filters/refuse_seconds/1hour")},
+         {Days(1),
+          Counter(getFrameworkMetricPrefix(frameworkInfo) +
+              "allocation/offer_filters/refuse_seconds/1day")}})
 {
   process::metrics::add(subscribed);
   process::metrics::add(calls);
@@ -541,6 +558,11 @@ FrameworkMetrics::FrameworkMetrics(const FrameworkInfo& _frameworkInfo)
   process::metrics::add(offers_declined);
   process::metrics::add(offers_rescinded);
 
+  process::metrics::add(refuse_seconds_infinite);
+  foreachvalue (const Counter& counter, refuseSecondsBuckets) {
+    process::metrics::add(counter);
+  }
+
   // Add metrics for scheduler calls.
   for (int index = 0;
        index < scheduler::Call::Type_descriptor()->value_count();
@@ -691,6 +713,11 @@ FrameworkMetrics::~FrameworkMetrics()
   foreachvalue (const Counter& counter, operation_types) {
     process::metrics::remove(counter);
   }
+
+  process::metrics::remove(refuse_seconds_infinite);
+  foreachvalue (const Counter& counter, refuseSecondsBuckets) {
+    process::metrics::remove(counter);
+  }
 }
 
 
@@ -784,6 +811,21 @@ void FrameworkMetrics::incrementEvent(const scheduler::Event& event)
   }
 }
 
+
+void FrameworkMetrics::incrementOfferFilterBuckets(const Duration duration)
+{
+  refuse_seconds_infinite++;
+
+  foreachpair (
+      const Duration& bucketDuration,
+      Counter& counter,
+      refuseSecondsBuckets) {
+    if (duration <= bucketDuration) {
+      counter++;
+    }
+  }
+}
+
 } // namespace master {
 } // namespace internal {
 } // namespace mesos {
diff --git a/src/master/metrics.hpp b/src/master/metrics.hpp
index 7285bc24d..d80de329a 100644
--- a/src/master/metrics.hpp
+++ b/src/master/metrics.hpp
@@ -25,6 +25,7 @@
 #include <process/metrics/push_gauge.hpp>
 #include <process/metrics/metrics.hpp>
 
+#include <stout/duration.hpp>
 #include <stout/hashmap.hpp>
 
 #include "mesos/mesos.hpp"
@@ -228,6 +229,8 @@ struct FrameworkMetrics
 
   void incrementOperation(const Offer::Operation& operation);
 
+  void incrementOfferFilterBuckets(const Duration _duration);
+
   const FrameworkInfo frameworkInfo;
 
   process::metrics::PushGauge subscribed;
@@ -253,6 +256,12 @@ struct FrameworkMetrics
 
   process::metrics::Counter operations;
   hashmap<Offer::Operation::Type, process::metrics::Counter> operation_types;
+
+  // Counts of the numbers of filters set by the framework with `refuse_seconds`
+  // durations less than or equal to a particular value. Since all durations are
+  // less than infinity, the infinite metric is a total count of filters.
+  process::metrics::Counter refuse_seconds_infinite;
+  hashmap<Duration, process::metrics::Counter> refuseSecondsBuckets;
 };
 
 
-- 
2.14.1

