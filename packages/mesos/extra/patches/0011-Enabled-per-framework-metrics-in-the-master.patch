From f2333b09a468d213a7f3f0d28be2a25e2de03782 Mon Sep 17 00:00:00 2001
From: Greg Mann <greg@mesosphere.io>
Date: Wed, 1 Aug 2018 07:57:56 -0700
Subject: [PATCH] Enabled per-framework metrics in the master.

The `FrameworkMetrics` struct will be used to track per-framework
metrics in the master.

Review: https://reviews.apache.org/r/67962/
---
 src/master/master.hpp  |  8 +++++++-
 src/master/metrics.cpp | 16 ++++++++++++++++
 src/master/metrics.hpp | 13 +++++++++++++
 3 files changed, 36 insertions(+), 1 deletion(-)

diff --git a/src/master/master.hpp b/src/master/master.hpp
index 61809de88..367060738 100644
--- a/src/master/master.hpp
+++ b/src/master/master.hpp
@@ -2894,6 +2894,9 @@ struct Framework
   Option<process::Owned<Heartbeater<scheduler::Event, v1::scheduler::Event>>>
     heartbeater;
 
+  // This is used for per-framwork metrics.
+  FrameworkMetrics metrics;
+
 private:
   Framework(Master* const _master,
             const Flags& masterFlags,
@@ -2908,8 +2911,11 @@ private:
       registeredTime(time),
       reregisteredTime(time),
       completedTasks(masterFlags.max_completed_tasks_per_framework),
-      unreachableTasks(masterFlags.max_unreachable_tasks_per_framework)
+      unreachableTasks(masterFlags.max_unreachable_tasks_per_framework),
+      metrics(_info)
   {
+    CHECK(_info.has_id());
+
     foreach (const std::string& role, roles) {
       // NOTE: It's possible that we're already being tracked under the role
       // because a framework can unsubscribe from a role while it still has
diff --git a/src/master/metrics.cpp b/src/master/metrics.cpp
index 5c1d08664..beeb700df 100644
--- a/src/master/metrics.cpp
+++ b/src/master/metrics.cpp
@@ -16,6 +16,8 @@
 
 #include <string>
 
+#include <process/http.hpp>
+
 #include <process/metrics/counter.hpp>
 #include <process/metrics/pull_gauge.hpp>
 #include <process/metrics/metrics.hpp>
@@ -510,6 +512,20 @@ void Metrics::incrementTasksStates(
 }
 
 
+FrameworkMetrics::FrameworkMetrics(const FrameworkInfo& _frameworkInfo)
+  : frameworkInfo(_frameworkInfo) {}
+
+
+FrameworkMetrics::~FrameworkMetrics() {}
+
+
+string getFrameworkMetricPrefix(const FrameworkInfo& frameworkInfo)
+{
+  // Percent-encode the framework name to avoid characters like '/' and ' '.
+  return "master/frameworks/" + process::http::encode(frameworkInfo.name()) +
+    "/" + stringify(frameworkInfo.id()) + "/";
+}
+
 } // namespace master {
 } // namespace internal {
 } // namespace mesos {
diff --git a/src/master/metrics.hpp b/src/master/metrics.hpp
index 1ef74dedf..9f10aecba 100644
--- a/src/master/metrics.hpp
+++ b/src/master/metrics.hpp
@@ -207,6 +207,19 @@ struct Metrics
       const TaskStatus::Reason& reason);
 };
 
+
+struct FrameworkMetrics
+{
+  explicit FrameworkMetrics(const FrameworkInfo& _frameworkInfo);
+
+  ~FrameworkMetrics();
+
+  const FrameworkInfo frameworkInfo;
+};
+
+
+std::string getFrameworkMetricPrefix(const FrameworkInfo& frameworkInfo);
+
 } // namespace master {
 } // namespace internal {
 } // namespace mesos {
-- 
2.17.0

