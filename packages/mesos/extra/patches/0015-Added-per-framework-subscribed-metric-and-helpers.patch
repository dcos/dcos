From 4c1707a48dcd119ba09af87664efb8465c60cc8c Mon Sep 17 00:00:00 2001
From: Gilbert Song <songzihao1990@gmail.com>
Date: Wed, 1 Aug 2018 07:58:06 -0700
Subject: [PATCH] Added per-framework 'subscribed' metric and helpers.

Review: https://reviews.apache.org/r/66820/
---
 src/master/master.cpp  | 17 ++++++++++++-----
 src/master/master.hpp  |  6 +++++-
 src/master/metrics.cpp | 12 ++++++++++--
 src/master/metrics.hpp |  3 +++
 4 files changed, 30 insertions(+), 8 deletions(-)

diff --git a/src/master/master.cpp b/src/master/master.cpp
index 8208beec3..75d8ab35f 100644
--- a/src/master/master.cpp
+++ b/src/master/master.cpp
@@ -437,6 +437,13 @@ void Framework::untrackUnderRole(const string& role)
 }
 
 
+void Framework::setFrameworkState(const Framework::State& _state)
+{
+  state = _state;
+  metrics.subscribed = state == Framework::State::ACTIVE ? 1 : 0;
+}
+
+
 void Master::initialize()
 {
   LOG(INFO) << "Master " << info_.id() << " (" << info_.hostname() << ")"
@@ -3170,7 +3177,7 @@ void Master::_subscribe(
       // NOTE: We do this after recovering resources (above) so that
       // the allocator has the correct view of the framework's share.
       if (!framework->active()) {
-        framework->state = Framework::State::ACTIVE;
+        framework->setFrameworkState(Framework::State::ACTIVE);
         allocator->activateFramework(framework->id());
       }
 
@@ -3284,7 +3291,7 @@ void Master::disconnect(Framework* framework)
 
   LOG(INFO) << "Disconnecting framework " << *framework;
 
-  framework->state = Framework::State::DISCONNECTED;
+  framework->setFrameworkState(Framework::State::DISCONNECTED);
 
   if (framework->pid.isSome()) {
     // Remove the framework from authenticated. This is safe because
@@ -3307,7 +3314,7 @@ void Master::deactivate(Framework* framework, bool rescind)
 
   LOG(INFO) << "Deactivating framework " << *framework;
 
-  framework->state = Framework::State::INACTIVE;
+  framework->setFrameworkState(Framework::State::INACTIVE);
 
   // Tell the allocator to stop allocating resources to this framework.
   allocator->deactivateFramework(framework->id());
@@ -8238,7 +8245,7 @@ Try<Nothing> Master::activateRecoveredFramework(
   }
 
   // Activate the framework.
-  framework->state = Framework::State::ACTIVE;
+  framework->setFrameworkState(Framework::State::ACTIVE);
   allocator->activateFramework(framework->id());
 
   // Export framework metrics if a principal is specified in `FrameworkInfo`.
@@ -8396,7 +8403,7 @@ void Master::_failoverFramework(Framework* framework)
   // NOTE: We do this after recovering resources (above) so that
   // the allocator has the correct view of the framework's share.
   if (!framework->active()) {
-    framework->state = Framework::State::ACTIVE;
+    framework->setFrameworkState(Framework::State::ACTIVE);
     allocator->activateFramework(framework->id());
   }
 
diff --git a/src/master/master.hpp b/src/master/master.hpp
index 3117c4f7b..ae4e0674b 100644
--- a/src/master/master.hpp
+++ b/src/master/master.hpp
@@ -1607,6 +1607,7 @@ private:
   Master& operator=(const Master&); // No assigning.
 
   friend struct Framework;
+  friend struct FrameworkMetrics;
   friend struct Metrics;
   friend struct Slave;
   friend struct SlavesWriter;
@@ -2731,6 +2732,8 @@ struct Framework
   void trackUnderRole(const std::string& role);
   void untrackUnderRole(const std::string& role);
 
+  void setFrameworkState(const State& _state);
+
   Master* const master;
 
   FrameworkInfo info;
@@ -2834,7 +2837,6 @@ private:
       info(_info),
       roles(protobuf::framework::getRoles(_info)),
       capabilities(_info.capabilities()),
-      state(state),
       registeredTime(time),
       reregisteredTime(time),
       completedTasks(masterFlags.max_completed_tasks_per_framework),
@@ -2843,6 +2845,8 @@ private:
   {
     CHECK(_info.has_id());
 
+    setFrameworkState(state);
+
     foreach (const std::string& role, roles) {
       // NOTE: It's possible that we're already being tracked under the role
       // because a framework can unsubscribe from a role while it still has
diff --git a/src/master/metrics.cpp b/src/master/metrics.cpp
index beeb700df..af687f749 100644
--- a/src/master/metrics.cpp
+++ b/src/master/metrics.cpp
@@ -513,10 +513,18 @@ void Metrics::incrementTasksStates(
 
 
 FrameworkMetrics::FrameworkMetrics(const FrameworkInfo& _frameworkInfo)
-  : frameworkInfo(_frameworkInfo) {}
+  : frameworkInfo(_frameworkInfo),
+    subscribed(
+        getFrameworkMetricPrefix(frameworkInfo) + "subscribed")
+{
+  process::metrics::add(subscribed);
+}
 
 
-FrameworkMetrics::~FrameworkMetrics() {}
+FrameworkMetrics::~FrameworkMetrics()
+{
+  process::metrics::remove(subscribed);
+}
 
 
 string getFrameworkMetricPrefix(const FrameworkInfo& frameworkInfo)
diff --git a/src/master/metrics.hpp b/src/master/metrics.hpp
index 9f10aecba..d3f093f9d 100644
--- a/src/master/metrics.hpp
+++ b/src/master/metrics.hpp
@@ -22,6 +22,7 @@
 
 #include <process/metrics/counter.hpp>
 #include <process/metrics/pull_gauge.hpp>
+#include <process/metrics/push_gauge.hpp>
 #include <process/metrics/metrics.hpp>
 
 #include <stout/hashmap.hpp>
@@ -215,6 +216,8 @@ struct FrameworkMetrics
   ~FrameworkMetrics();
 
   const FrameworkInfo frameworkInfo;
+
+  process::metrics::PushGauge subscribed;
 };
 
 
-- 
2.17.0

