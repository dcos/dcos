From 8c5d701e3c2c5cb34ab40d18c84924d844f6796a Mon Sep 17 00:00:00 2001
From: Greg Mann <greg@mesosphere.io>
Date: Wed, 1 Aug 2018 07:59:04 -0700
Subject: [PATCH] Added per-framework metrics for suppressed roles.

Review: https://reviews.apache.org/r/66870/
---
 src/master/allocator/mesos/hierarchical.cpp | 55 +++++++++++++++++
 src/master/allocator/mesos/metrics.cpp      | 66 ++++++++++++++++++++-
 src/master/allocator/mesos/metrics.hpp      | 12 ++++
 3 files changed, 131 insertions(+), 2 deletions(-)

diff --git a/src/master/allocator/mesos/hierarchical.cpp b/src/master/allocator/mesos/hierarchical.cpp
index a21e8d950..68d3fa1c8 100644
--- a/src/master/allocator/mesos/hierarchical.cpp
+++ b/src/master/allocator/mesos/hierarchical.cpp
@@ -278,8 +278,10 @@ void HierarchicalAllocatorProcess::addFramework(
 
     if (suppressedRoles.count(role)) {
       frameworkSorters.at(role)->deactivate(frameworkId.value());
+      framework.metrics->suppressRole(role);
     } else {
       frameworkSorters.at(role)->activate(frameworkId.value());
+      framework.metrics->reviveRole(role);
     }
   }
 
@@ -494,6 +496,57 @@ void HierarchicalAllocatorProcess::updateFramework(
     frameworkSorters.at(role)->activate(frameworkId.value());
   }
 
+  const set<string> addedRoles = [&]() {
+    set<string> result = newRoles;
+    foreach (const string& role, oldRoles) {
+      result.erase(role);
+    }
+    return result;
+  }();
+
+  foreach (const string& role, addedRoles) {
+    framework.metrics->addSubscribedRole(role);
+  }
+
+  const set<string> removedRoles = [&]() {
+    set<string> result = oldRoles;
+    foreach (const string& role, newRoles) {
+      result.erase(role);
+    }
+    return result;
+  }();
+
+  foreach (const string& role, removedRoles) {
+    framework.metrics->removeSubscribedRole(role);
+  }
+
+  const set<string> newSuppressedRoles = [&]() {
+    set<string> result = suppressedRoles;
+    foreach (const string& role, oldSuppressedRoles) {
+      result.erase(role);
+    }
+    return result;
+  }();
+
+  foreach (const string& role, newSuppressedRoles) {
+    framework.metrics->suppressRole(role);
+  }
+
+  const set<string> newRevivedRoles = [&]() {
+    set<string> result = oldSuppressedRoles;
+    foreach (const string& role, suppressedRoles) {
+      result.erase(role);
+    }
+    foreach (const string& role, removedRoles) {
+      result.erase(role);
+    }
+    return result;
+  }();
+
+  foreach (const string& role, newRevivedRoles) {
+    framework.metrics->reviveRole(role);
+  }
+
   framework.roles = newRoles;
   framework.suppressedRoles = suppressedRoles;
   framework.capabilities = frameworkInfo.capabilities();
@@ -1235,6 +1288,7 @@ void HierarchicalAllocatorProcess::suppressOffers(
 
     frameworkSorters.at(role)->deactivate(frameworkId.value());
     framework.suppressedRoles.insert(role);
+    framework.metrics->suppressRole(role);
   }
 
   LOG(INFO) << "Suppressed offers for roles " << stringify(roles)
@@ -1263,6 +1317,7 @@ void HierarchicalAllocatorProcess::reviveOffers(
 
     frameworkSorters.at(role)->activate(frameworkId.value());
     framework.suppressedRoles.erase(role);
+    framework.metrics->reviveRole(role);
   }
 
   // We delete each actual `OfferFilter` when
diff --git a/src/master/allocator/mesos/metrics.cpp b/src/master/allocator/mesos/metrics.cpp
index 7a4b153db..0b5534715 100644
--- a/src/master/allocator/mesos/metrics.cpp
+++ b/src/master/allocator/mesos/metrics.cpp
@@ -21,15 +21,21 @@
 #include <mesos/quota/quota.hpp>
 
 #include <process/metrics/pull_gauge.hpp>
+#include <process/metrics/push_gauge.hpp>
 #include <process/metrics/metrics.hpp>
 
 #include <stout/hashmap.hpp>
 
+#include "common/protobuf_utils.hpp"
+
+#include "master/metrics.hpp"
+
 #include "master/allocator/mesos/hierarchical.hpp"
 
 using std::string;
 
 using process::metrics::PullGauge;
+using process::metrics::PushGauge;
 
 namespace mesos {
 namespace internal {
@@ -203,10 +209,66 @@ void Metrics::removeRole(const string& role)
 
 
 FrameworkMetrics::FrameworkMetrics(const FrameworkInfo& _frameworkInfo)
-  : frameworkInfo(_frameworkInfo) {}
+  : frameworkInfo(_frameworkInfo)
+{
+  // TODO(greggomann): Calling `getRoles` below copies the roles from the
+  // framework info, which could become expensive if the number of roles grows
+  // large. Consider optimizing this.
+  foreach (
+      const string& role,
+      protobuf::framework::getRoles(frameworkInfo)) {
+    addSubscribedRole(role);
+  }
+}
+
+
+FrameworkMetrics::~FrameworkMetrics()
+{
+  foreach (const string& role, suppressed.keys()) {
+    removeSubscribedRole(role);
+  }
+
+  CHECK(suppressed.empty());
+}
+
+
+void FrameworkMetrics::reviveRole(const string& role)
+{
+  auto iter = suppressed.find(role);
+  CHECK(iter != suppressed.end());
+  iter->second = 0;
+}
 
 
-FrameworkMetrics::~FrameworkMetrics() {}
+void FrameworkMetrics::suppressRole(const string& role)
+{
+  auto iter = suppressed.find(role);
+  CHECK(iter != suppressed.end());
+  iter->second = 1;
+}
+
+
+void FrameworkMetrics::addSubscribedRole(const string& role)
+{
+  auto result = suppressed.emplace(
+      role,
+      PushGauge(
+          getFrameworkMetricPrefix(frameworkInfo) + "roles/" +
+          role + "/suppressed"));
+
+  CHECK(result.second);
+  process::metrics::add(result.first->second);
+}
+
+
+void FrameworkMetrics::removeSubscribedRole(const string& role)
+{
+  auto iter = suppressed.find(role);
+
+  CHECK(iter != suppressed.end());
+  process::metrics::remove(iter->second);
+  suppressed.erase(iter);
+}
 
 } // namespace internal {
 } // namespace allocator {
diff --git a/src/master/allocator/mesos/metrics.hpp b/src/master/allocator/mesos/metrics.hpp
index daac93f7e..34cc16b3a 100644
--- a/src/master/allocator/mesos/metrics.hpp
+++ b/src/master/allocator/mesos/metrics.hpp
@@ -24,6 +24,7 @@
 
 #include <process/metrics/counter.hpp>
 #include <process/metrics/pull_gauge.hpp>
+#include <process/metrics/push_gauge.hpp>
 #include <process/metrics/timer.hpp>
 
 #include <process/pid.hpp>
@@ -97,7 +98,18 @@ struct FrameworkMetrics
 
   ~FrameworkMetrics();
 
+  void reviveRole(const std::string& role);
+  void suppressRole(const std::string& role);
+
+  // Since frameworks can update their list of roles,
+  // these methods add/remove per-role metrics.
+  void addSubscribedRole(const std::string& role);
+  void removeSubscribedRole(const std::string& role);
+
   const FrameworkInfo frameworkInfo;
+
+  // Suppresion state metric (boolean 0 or 1) for each role.
+  hashmap<std::string, process::metrics::PushGauge> suppressed;
 };
 
 } // namespace internal {
-- 
2.17.0

