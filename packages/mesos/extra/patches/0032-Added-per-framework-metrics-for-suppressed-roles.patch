From 3a32fc737b7f210bfad3c7246589a037c9f1981d Mon Sep 17 00:00:00 2001
From: Greg Mann <greg@mesosphere.io>
Date: Fri, 6 Jul 2018 11:35:39 -0700
Subject: [PATCH] Added per-framework metrics for suppressed roles.

Review: https://reviews.apache.org/r/66870/
---
 src/master/allocator/mesos/hierarchical.cpp | 27 +++++++++++++++++++++
 src/master/allocator/mesos/metrics.cpp      | 37 +++++++++++++++++++++++++----
 src/master/allocator/mesos/metrics.hpp      |  5 ++++
 3 files changed, 65 insertions(+), 4 deletions(-)

diff --git a/src/master/allocator/mesos/hierarchical.cpp b/src/master/allocator/mesos/hierarchical.cpp
index aae9040b9..bba166d40 100644
--- a/src/master/allocator/mesos/hierarchical.cpp
+++ b/src/master/allocator/mesos/hierarchical.cpp
@@ -278,6 +278,7 @@ void HierarchicalAllocatorProcess::addFramework(
 
     if (suppressedRoles.count(role)) {
       frameworkSorters.at(role)->deactivate(frameworkId.value());
+      framework.metrics->suppressRole(role);
     } else {
       frameworkSorters.at(role)->activate(frameworkId.value());
     }
@@ -445,6 +446,18 @@ void HierarchicalAllocatorProcess::updateFramework(
     return result;
   }();
 
+  const set<string> newSuppressedRoles = [&]() {
+    set<string> result = suppressedRoles;
+    foreach (const string& role, oldSuppressedRoles) {
+      result.erase(role);
+    }
+    return result;
+  }();
+
+  foreach (const string& role, newSuppressedRoles) {
+    framework.metrics->suppressRole(role);
+  }
+
   foreach (const string& role, rolesToDeactivate) {
     CHECK(frameworkSorters.contains(role));
     frameworkSorters.at(role)->deactivate(frameworkId.value());
@@ -461,6 +474,18 @@ void HierarchicalAllocatorProcess::updateFramework(
     }
   }
 
+  const set<string> newRevivedRoles = [&]() {
+    set<string> result = oldSuppressedRoles;
+    foreach (const string& role, suppressedRoles) {
+      result.erase(role);
+    }
+    return result;
+  }();
+
+  foreach (const string& role, newRevivedRoles) {
+    framework.metrics->reviveRole(role);
+  }
+
   // The roles which are candidates for activation are the roles that are
   // added, as well as the roles which have moved from suppressed to
   // non-suppressed mode.
@@ -1237,6 +1262,7 @@ void HierarchicalAllocatorProcess::suppressOffers(
 
     frameworkSorters.at(role)->deactivate(frameworkId.value());
     framework.suppressedRoles.insert(role);
+    framework.metrics->suppressRole(role);
   }
 
   LOG(INFO) << "Suppressed offers for roles " << stringify(roles)
@@ -1265,6 +1291,7 @@ void HierarchicalAllocatorProcess::reviveOffers(
 
     frameworkSorters.at(role)->activate(frameworkId.value());
     framework.suppressedRoles.erase(role);
+    framework.metrics->reviveRole(role);
   }
 
   // We delete each actual `OfferFilter` when
diff --git a/src/master/allocator/mesos/metrics.cpp b/src/master/allocator/mesos/metrics.cpp
index 0dd0686c6..8cd7925c0 100644
--- a/src/master/allocator/mesos/metrics.cpp
+++ b/src/master/allocator/mesos/metrics.cpp
@@ -21,10 +21,13 @@
 #include <mesos/quota/quota.hpp>
 
 #include <process/metrics/pull_gauge.hpp>
+#include <process/metrics/push_gauge.hpp>
 #include <process/metrics/metrics.hpp>
 
 #include <stout/hashmap.hpp>
 
+#include "common/protobuf_utils.hpp"
+
 #include "master/allocator/mesos/hierarchical.hpp"
 
 #include "master/metrics.hpp"
@@ -32,6 +35,7 @@
 using std::string;
 
 using process::metrics::PullGauge;
+using process::metrics::PushGauge;
 
 namespace mesos {
 namespace internal {
@@ -254,6 +258,7 @@ FrameworkMetrics::~FrameworkMetrics()
   }
 
   CHECK(roleDrfPositions.empty());
+  CHECK(suppressed.empty());
 }
 
 
@@ -273,29 +278,53 @@ void FrameworkMetrics::setDrfPositions(
 }
 
 
+void FrameworkMetrics::reviveRole(const string& role)
+{
+  CHECK(suppressed.contains(role));
+
+  suppressed.at(role) = 0.;
+}
+
+
+void FrameworkMetrics::suppressRole(const string& role)
+{
+  CHECK(suppressed.contains(role));
+
+  suppressed.at(role) = 1.;
+}
+
+
 void FrameworkMetrics::addRole(const string& role)
 {
   CHECK(!roleDrfPositions.contains(role));
-
   roleDrfPositions.emplace(
       role,
       DrfPositions(
           getFrameworkMetricPrefix(frameworkInfo) + "allocation/roles/" +
             normalizeMetricKey(role) + "/latest_position/"));
-
   process::metrics::add(roleDrfPositions.at(role).min);
   process::metrics::add(roleDrfPositions.at(role).max);
+
+  CHECK(!suppressed.contains(role));
+  suppressed.emplace(
+      role,
+      PushGauge(
+          getFrameworkMetricPrefix(frameworkInfo) + "roles/" +
+          normalizeMetricKey(role) + "/suppressed"));
+  process::metrics::add(suppressed.at(role));
 }
 
 
 void FrameworkMetrics::removeRole(const string& role)
 {
   CHECK(roleDrfPositions.contains(role));
-
   process::metrics::remove(roleDrfPositions.at(role).min);
   process::metrics::remove(roleDrfPositions.at(role).max);
-
   roleDrfPositions.erase(role);
+
+  CHECK(suppressed.contains(role));
+  process::metrics::remove(suppressed.at(role));
+  suppressed.erase(role);
 }
 
 } // namespace internal {
diff --git a/src/master/allocator/mesos/metrics.hpp b/src/master/allocator/mesos/metrics.hpp
index e28d17460..201612f27 100644
--- a/src/master/allocator/mesos/metrics.hpp
+++ b/src/master/allocator/mesos/metrics.hpp
@@ -102,6 +102,9 @@ struct FrameworkMetrics
       const std::string& role,
       const std::pair<size_t, size_t>& minMax);
 
+  void reviveRole(const std::string& role);
+  void suppressRole(const std::string& role);
+
   // Since frameworks can update their list of roles upon reregistration,
   // these methods add/remove per-role metrics.
   void addRole(const std::string& role);
@@ -125,6 +128,8 @@ struct FrameworkMetrics
   };
 
   hashmap<std::string, DrfPositions> roleDrfPositions;
+
+  hashmap<std::string, process::metrics::PushGauge> suppressed;
 };
 
 } // namespace internal {
-- 
2.14.1

