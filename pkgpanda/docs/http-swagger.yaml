swagger: '2.0'
info:
  title: DC/OS Pkgpanda API
  version: '1.0.0'
basePath: /pkgpanda


definitions:

  PackageName:
    description: A package name.
    type: string
    example: 'mesos'
    # Pattern adapted from pkgpanda/__init__.py.
    pattern: '/^[a-zA-Z0-9@_+]([a-zA-Z0-9@._+\-]*[a-zA-Z0-9@._+])?$/'

  PackageVersion:
    description: A package version.
    type: string
    example: 'abcdef'
    # Pattern adapted from pkgpanda/__init__.py.
    pattern: '/^[a-zA-Z0-9@_+:.]+$/'

  PackageId:
    description: A unique pkgpanda package ID. Composed of a name and a version separated by `--`.
    type: string
    example: 'mesos--abcdef'
    # Pattern adapted from pkgpanda/__init__.py.
    pattern: '/^[a-zA-Z0-9@_+]([a-zA-Z0-9@._+\-]*[a-zA-Z0-9@._+])?--[a-zA-Z0-9@_+:.]+$/'

  PackageIdArray:
    description: An array of unique pkgpanda package IDs.
    type: array
    uniqueItems: true
    items:
      $ref: '#/definitions/PackageId'

  Package:
    description: A pkgpanda package.
    type: object
    required:
      - id
      - name
      - version
    properties:
      id:
        $ref: '#/definitions/PackageId'
      name:
        $ref: '#/definitions/PackageName'
      version:
        $ref: '#/definitions/PackageVersion'
    additionalProperties: false
    example: {"id": "mesos--abcdef", "name": "mesos", "version": "abcdef"}

  Error:
    description: An error response body.
    type: object
    required:
      - error
    properties:
      error:
        type: string
        description: The error message.
    additionalProperties: true
    example: {"error": "An error has occurred."}


parameters:

  PackageId:
    name: package-id
    in: path
    required: true
    # From #/definitions/PackageId.
    description: A unique pkgpanda package ID. Composed of a name and a version separated by `--`.
    type: string
    pattern: '/^[a-zA-Z0-9@_+]([a-zA-Z0-9@._+\-]*[a-zA-Z0-9@._+])?--[a-zA-Z0-9@_+:.]+$/'


paths:

  /repository/:
    get:
      summary: List the packages that are present in the node's pkgpanda repository.
      produces:
        - application/json
      responses:
        '200':
          description: A list of the packages on this node.
          schema:
            $ref: '#/definitions/PackageIdArray'

  /repository/{package-id}:
    get:
      summary: Get metadata for a package in the node's pkgpanda repository.
      parameters:
        - $ref: '#/parameters/PackageId'
      produces:
        - application/json
      responses:
        '200':
          description: Package metadata was successfully retrieved.
          schema:
            $ref: '#/definitions/Package'
        '404':
          description: The package is not present in this node's pkgpanda repository.
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Fetch a package from the repository URL in the request body.
      description: The package is fetched from `<repository_url>/<package_name>/<package_id>.tar.xz`.
      parameters:
        - $ref: '#/parameters/PackageId'
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - repository_url
            properties:
              repository_url:
                type: string
                description: The URL for a package repository.
            additionalProperties: false
            example: {"repository_url": "file:///opt/dcos_install_tmp"}
      produces:
        - application/json
      responses:
        '204':
          description: The package was successfully fetched.
        '400':
          description: The request body could not be parsed or the package ID is invalid.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: The package fetch failed.
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Remove a package from the node's pkgpanda repository.
      parameters:
        - $ref: '#/parameters/PackageId'
      produces:
        - application/json
      responses:
        '204':
          description: The package was successfully deleted.
        '404':
          description: The package is not present in this node's pkgpanda repository.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: The package is active, so it can't be removed.
          schema:
            $ref: '#/definitions/Error'

  /active/:
    get:
      summary: List packages that are active on this node.
      produces:
        - application/json
      responses:
        '200':
          description: A list of the active packages on this node.
          schema:
            $ref: '#/definitions/PackageIdArray'
    put:
      summary: Replace the current list of active packages with the packages in the request body.
      consumes:
        - application/json
      parameters:
        - name: packages
          in: body
          required: true
          schema:
            $ref: '#/definitions/PackageIdArray'
      produces:
        - application/json
      responses:
        '204':
          description: The packages in the request body have been activated. (This does not necessarily mean that their services started successfully.)
        '400':
          description: The request body could not be parsed.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Packages could not be activated due to a conflict.
          schema:
            $ref: '#/definitions/Error'

  /active/{package-id}:
    get:
      summary: Get metadata for a package that is active on this node.
      parameters:
        - $ref: '#/parameters/PackageId'
      produces:
        - application/json
      responses:
        '200':
          description: The package is active and its metadata was successfully retrieved.
          schema:
            $ref: '#/definitions/Package'
        '404':
          description: The package is not active on this node.
          schema:
            $ref: '#/definitions/Error'
