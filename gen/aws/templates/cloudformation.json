{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "DC/OS AWS CloudFormation Template",
  "Metadata": {
    "DcosImageCommit": "unset",
    "TemplateGenerationDate": "unset"
  },
  "Parameters" : {
    "KeyName" : {
      "Description" : "Required: EC2 Key Pair.",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "AdminLocation": {
      "Description" : "Optional: Specify the IP range to whitelist access to the admin zone. Must be a valid CIDR.",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "ConstraintDescription" : "must be a valid CIDR."
    },
    "SlaveInstanceCount" : {
      "Description" : "Required: # of private agents",
      "Type" : "Number",
      "Default" : "{{ num_private_slaves }}"
    },
    "PublicSlaveInstanceCount" : {
      "Description" : "Required: # of public agents",
      "Type" : "Number",
      "Default" : "{{ num_public_slaves }}"
    },
    "DefaultInstanceType" : {
      "Description" : "default instance",
      "Type" : "String",
      "Default" : "m5.large"
    }
{% switch oauth_available %}
{% case "true" %}
    ,
    "OAuthEnabled": {
      "Description": "\nEnable OAuth",
      "Type": "String",
      "Default": "true",
      "AllowedValues": ["true", "false"]
    }
{% case "false" %}
{% endswitch %}
{% switch licensing_enabled %}
{% case "true" %}
    ,
    "LicenseKey": {
      "Description": "License key",
      "Type": "String",
      "Default": ""
    }
{% case "false" %}
{% endswitch %}
  },
  "Mappings": {
    "RegionToAmi": {{ region_to_ami_mapping }},
    "NATAmi" : {{ nat_ami_mapping }},
    "Parameters": {
      "PublicSubnetRange": {
        "default": "10.0.4.0/22"
      },
      "PrivateSubnetRange": {
        "default": "10.0.0.0/22"
      },
      "VPCSubnetRange": {
        "default": "10.0.0.0/16"
      },
      "StackCreationTimeout": {
          "default": "PT45M"
      }}
  },

  "Conditions" : {
    "RegionIsUsEast1": { "Fn::Equals": [ { "Ref": "AWS::Region" }, "us-east-1" ] },
    "RegionIsUsGovWest1" : {
      "Fn::Equals" : [
        { "Ref" : "AWS::Region" },
        "us-gov-west-1"
      ]
    }
  },

  "Resources" : {
    "Vpc" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "Parameters", "VPCSubnetRange", "default" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "Parameters", "PublicSubnetRange", "default" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      },
      "DependsOn": "Vpc"
    },

    "PrivateSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "Parameters", "PrivateSubnetRange", "default" ] },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      },
      "DependsOn": "Vpc"
    },

    "DHCPOptions" : {
      "Type" : "AWS::EC2::DHCPOptions",
      "Properties" : {
        "DomainName" : { "Fn::If" : [
            "RegionIsUsEast1",
            "ec2.internal",
            { "Fn::Join" :  [  "", [ { "Ref": "AWS::Region" }, ".compute.internal" ] ] } ] },
            "DomainNameServers": [ "AmazonProvidedDNS" ]
      }
    },

    "VPCDHCPOptionsAssociation" : {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
       "Properties": {
          "DhcpOptionsId": { "Ref": "DHCPOptions" },
          "VpcId": { "Ref": "Vpc" }
       },
      "DependsOn": "Vpc"
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "DependsOn" : "Vpc",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "GatewayToInternet" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "DependsOn": "InternetGateway",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      },
      "DependsOn": "Vpc"
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PublicNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "InboundNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "OutboundNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "PublicSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },

    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PrivateRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NATInstance" }
      }
    },

    "PrivateSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "PrivateNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PrivateInboundNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "PrivateOutboundNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },
    "PrivateSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
      }
    },
    "NATInstance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "SourceDestCheck" : "false",
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "NATAmi", { "Ref" : "AWS::Region" }, "default" ] },
        "InstanceType" : { "Ref" : "DefaultInstanceType" },
        "NetworkInterfaces" : [
          {
            "SubnetId" : { "Ref" : "PublicSubnet" },
            "AssociatePublicIpAddress" : "true",
            "DeviceIndex" : "0",
            "GroupSet" : [ { "Ref" : "SlaveSecurityGroup" }, { "Ref" : "MasterSecurityGroup" }, { "Ref" : "AdminSecurityGroup" } ],
            "DeleteOnTermination" : "true"
          }
        ]
      }
    },

    "AdminSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Admin access to servers",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "AdminLocation" }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : { "Ref" : "AdminLocation" }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "443",
          "ToPort" : "443",
          "CidrIp" : { "Ref" : "AdminLocation" }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "12379",
          "ToPort" : "12379",
          "CidrIp" : { "Ref" : "AdminLocation" }
        } ]
      }
    },
    "ExhibitorS3Bucket" : {
      "Type" : "AWS::S3::Bucket",
      "DeletionPolicy" : "Retain"
    },
    "MasterRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "root",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
              "Effect": "Allow",
              "Action": [
                "s3:AbortMultipartUpload",
                "s3:DeleteObject",
                "s3:GetBucketAcl",
                "s3:GetBucketPolicy",
                "s3:GetObject",
                "s3:GetObjectAcl",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:ListMultipartUploadParts",
                "s3:PutObject",
                "s3:PutObjectAcl"
              ],
              "Resource": [
                { "Fn::Join" : [
                  "",
                  [
                    { "Fn::If" : [ "RegionIsUsGovWest1", "arn:aws-us-gov:s3:::", "arn:aws:s3:::" ] },
                    { "Ref" : "ExhibitorS3Bucket" },
                    "/*"
                  ]
                ] },
                { "Fn::Join" : [
                  "",
                  [
                    { "Fn::If" : [ "RegionIsUsGovWest1", "arn:aws-us-gov:s3:::", "arn:aws:s3:::" ] },
                    { "Ref" : "ExhibitorS3Bucket" }
                  ]
                ] }
              ]
            },
            {
              "Resource": [
                  { "Ref" : "AWS::StackId" },
                  { "Fn::Join" : ["", [{ "Ref" : "AWS::StackId" }, "/*" ]]}
              ],
              "Action": [
                  "cloudformation:*"
              ],
              "Effect": "Allow"
            },
            {
                "Resource": "*",
                "Action": [
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeSubnets",
                    "autoscaling:DescribeLaunchConfigurations",
                    "autoscaling:UpdateAutoScalingGroup",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeScalingActivities",
                    "elasticloadbalancing:DescribeLoadBalancers"
                ],
                "Effect": "Allow"
            }
            ]
          }
        } ]
      }
    },
    "SlaveRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Policies": [ {
          "PolicyName": "Slaves",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [ {
              "Resource": [
                  { "Ref" : "AWS::StackId" },
                  { "Fn::Join" : ["", [{ "Ref" : "AWS::StackId" }, "/*" ]]}
              ],
              "Action": [
                  "cloudformation:*"
              ],
              "Effect": "Allow"
            },
            {
              "Resource": "*",
              "Action": [
                "ec2:CreateTags",
                "ec2:DescribeInstances",
                "ec2:CreateVolume",
                "ec2:DeleteVolume",
                "ec2:AttachVolume",
                "ec2:DetachVolume",
                "ec2:DescribeVolumes",
                "ec2:DescribeVolumeStatus",
                "ec2:DescribeVolumeAttribute",
                "ec2:CreateSnapshot",
                "ec2:CopySnapshot",
                "ec2:DeleteSnapshot",
                "ec2:DescribeSnapshots",
                "ec2:DescribeSnapshotAttribute",
                "autoscaling:DescribeAutoScalingGroups",
                "cloudwatch:PutMetricData",
                "elasticloadbalancing:DescribeLoadBalancers",
                "elasticloadbalancing:CreateLoadBalancer",
                "elasticloadbalancing:DeleteLoadBalancer",
                "elasticloadbalancing:DescribeListeners",
                "elasticloadbalancing:CreateListener",
                "elasticloadbalancing:DeleteListener",
                "elasticloadbalancing:ModifyListener",
                "elasticloadbalancing:CreateTargetGroup",
                "elasticloadbalancing:DeleteTargetGroup",
                "elasticloadbalancing:DescribeTargetGroups",
                "elasticloadbalancing:ModifyTargetGroup",
                "elasticloadbalancing:RegisterTargets",
                "elasticloadbalancing:DeregisterTargets",
                "elasticloadbalancing:DescribeTargetHealth",
                "elasticloadbalancing:DescribeLoadBalancerAttributes",
                "elasticloadbalancing:ModifyLoadBalancerAttributes",
                "elasticloadbalancing:DescribeTags",
                "elasticloadbalancing:AddTags",
                "elasticloadbalancing:RemoveTags"
              ],
              "Effect": "Allow"
            }
            ]
          }
        } ]
      }
    },
    "MasterInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "MasterRole"
        } ]
      }
    },
    "SlaveInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "SlaveRole"
        } ]
      }
    },
    "MasterServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "AvailabilityZones" : [{ "Fn::GetAtt" : [ "PublicSubnet", "AvailabilityZone" ] }],
        "LaunchConfigurationName" : { "Ref" : "MasterLaunchConfig" },
        "MinSize" : {{ num_masters }},
        "MaxSize" : {{ num_masters }},
        "DesiredCapacity" : {{ num_masters }},
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" }, { "Ref" : "InternalMasterLoadBalancer"} ],
        "VPCZoneIdentifier" : [{ "Ref" : "PublicSubnet" }],
        "Tags" : [
          {
            "Key" : "role",
            "Value" : "mesos-master",
            "PropagateAtLaunch" : "true"
          }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : { "Fn::FindInMap" : [ "Parameters", "StackCreationTimeout", "default" ] },
          "Count" : {{ num_masters }}
        }
      }
    },
    "MasterLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "RegionToAmi", { "Ref" : "AWS::Region" }, "stable" ] },
        "BlockDeviceMappings" : [ { "DeviceName" : "/dev/xvda", "Ebs" : { "VolumeSize": 150, "VolumeType": "gp2", "DeleteOnTermination": true} },
                                  { "DeviceName" : "/dev/xvdb", "Ebs" : { "VolumeSize": 80, "VolumeType": "gp2", "DeleteOnTermination": true} }],
        "SecurityGroups" : [ { "Ref" : "MasterSecurityGroup" }, { "Ref" : "AdminSecurityGroup" } ],
        "IamInstanceProfile" : { "Ref" : "MasterInstanceProfile" },
        "AssociatePublicIpAddress" : "true",
        "EbsOptimized": "true",
        "InstanceType" : { "Ref" : "DefaultInstanceType" },
        "UserData" : { "Fn::Base64" : { "Fn::Join": ["", [
          {{ master_cloud_config }}
        ]]
        }
        }
      }
    },
    "MasterSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Masters",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "5050", "ToPort" : "5050", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "12379", "ToPort" : "12379", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "8181", "ToPort" : "8181", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} },
          { "IpProtocol" : "tcp", "FromPort" : "2181", "ToPort" : "2181", "SourceSecurityGroupId" : { "Ref" : "LbSecurityGroup"} }
        ]
      }
    },
    "MasterToMasterIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "MasterSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "MasterSecurityGroup" }
      }
    },
    "LbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Master LB",
        "VpcId" : { "Ref" : "Vpc" }
      }
    },
    "InternalMasterLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "SecurityGroups": [{ "Ref": "LbSecurityGroup" }, { "Ref" : "AdminSecurityGroup" }, { "Ref" : "SlaveSecurityGroup" }, { "Ref" : "PublicSlaveSecurityGroup" }, { "Ref" : "MasterSecurityGroup" }],
        "Subnets": [{ "Ref": "PublicSubnet" }],
        "Scheme": "internal",
        "Listeners" : [
          {
            "LoadBalancerPort" : "5050",
            "Protocol" : "HTTP",
            "InstancePort" : "5050",
            "InstanceProtocol" : "HTTP"
          },
          {
            "LoadBalancerPort" : "2181",
            "Protocol" : "TCP",
            "InstancePort" : "2181",
            "InstanceProtocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "8181",
            "Protocol" : "HTTP",
            "InstancePort" : "8181",
            "InstanceProtocol" : "HTTP"
          },
          {
            "LoadBalancerPort" : "80",
            "Protocol" : "TCP",
            "InstancePort" : "80",
            "InstanceProtocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "443",
            "Protocol" : "TCP",
            "InstancePort" : "443",
            "InstanceProtocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "12379",
            "Protocol" : "TCP",
            "InstancePort" : "12379",
            "InstanceProtocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "8080",
            "Protocol" : "HTTP",
            "InstancePort" : "8080",
            "InstanceProtocol" : "HTTP"
          }],
        "HealthCheck" : {
          "Target" : "TCP:5050",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "2",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },
    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "SecurityGroups": [{ "Ref": "LbSecurityGroup" }, { "Ref" : "AdminSecurityGroup" }],
        "Subnets": [{ "Ref": "PublicSubnet" }],
        "Listeners" : [
          {
            "LoadBalancerPort" : "80",
            "Protocol" : "TCP",
            "InstancePort" : "80",
            "InstanceProtocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "443",
            "Protocol" : "TCP",
            "InstancePort" : "443",
            "InstanceProtocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "12379",
            "Protocol" : "TCP",
            "InstancePort" : "12379",
            "InstanceProtocol" : "TCP"
          }],
        "HealthCheck" : {
          "Target" : "TCP:5050",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "2",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },
    "PublicSlaveLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "SecurityGroups": [{ "Ref": "PublicSlaveSecurityGroup" }],
        "Subnets": [{ "Ref": "PublicSubnet" }],
        "Listeners" : [
          {
            "LoadBalancerPort" : "80",
            "Protocol" : "TCP",
            "InstancePort" : "80",
            "InstanceProtocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "443",
            "Protocol" : "TCP",
            "InstancePort" : "443",
            "InstanceProtocol" : "TCP"
          }],
        "HealthCheck" : {
          "Target" : "HTTP:9090/_haproxy_health_check",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "2",
          "Interval" : "5",
          "Timeout" : "2"
        }
      }
    },
    "SlaveServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : ["PrivateOutboundNetworkAclEntry", "NATInstance"],
      "Properties" : {
        "AvailabilityZones" : [{ "Fn::GetAtt" : [ "PrivateSubnet", "AvailabilityZone" ] }],
        "LaunchConfigurationName" : { "Ref" : "SlaveLaunchConfig" },
        "MinSize" : { "Ref" : "SlaveInstanceCount" },
        "MaxSize" : { "Ref" : "SlaveInstanceCount" },
        "DesiredCapacity" : { "Ref" : "SlaveInstanceCount" },
        "VPCZoneIdentifier" : [{ "Ref" : "PrivateSubnet" }],
        "Tags" : [
          {
            "Key" : "role",
            "Value" : "mesos-slave",
            "PropagateAtLaunch" : "true"
          }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : { "Fn::FindInMap" : [ "Parameters", "StackCreationTimeout", "default" ] },
          "Count" : { "Ref" : "SlaveInstanceCount" }
        }
      }
    },

    "SlaveLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "RegionToAmi", { "Ref" : "AWS::Region" }, "stable" ] },
        "BlockDeviceMappings" : [ { "DeviceName" : "/dev/xvda", "Ebs" : { "VolumeSize": 150, "VolumeType": "gp2", "DeleteOnTermination": true} },
                                  { "DeviceName" : "/dev/xvdb", "Ebs" : { "VolumeSize": 80, "VolumeType": "gp2", "DeleteOnTermination": true} } ],
        "SecurityGroups" : [ { "Ref" : "SlaveSecurityGroup" } ],
        "IamInstanceProfile" : { "Ref" : "SlaveInstanceProfile" },
        "EbsOptimized": "true",
        "AssociatePublicIpAddress" : "false",
        "InstanceType" : { "Ref" : "DefaultInstanceType" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          {{ agent_private_cloud_config }}
        ]]}}
      }
    },

    "PublicSlaveServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "AvailabilityZones" : [{ "Fn::GetAtt" : [ "PublicSubnet", "AvailabilityZone" ] }],
        "LaunchConfigurationName" : { "Ref" : "PublicSlaveLaunchConfig" },
        "MinSize" : { "Ref" : "PublicSlaveInstanceCount" },
        "MaxSize" : { "Ref" : "PublicSlaveInstanceCount" },
        "DesiredCapacity" : { "Ref" : "PublicSlaveInstanceCount" },
        "LoadBalancerNames" : [{ "Ref" : "PublicSlaveLoadBalancer" }],
        "VPCZoneIdentifier" : [{ "Ref" : "PublicSubnet" }],
        "Tags" : [
          {
            "Key" : "role",
            "Value" : "mesos-slave",
            "PropagateAtLaunch" : "true"
          }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : { "Fn::FindInMap" : [ "Parameters", "StackCreationTimeout", "default" ] },
          "Count" : { "Ref" : "PublicSlaveInstanceCount" }
        }
      }
    },
    "PublicSlaveLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "RegionToAmi", { "Ref" : "AWS::Region" }, "stable" ] },
        "BlockDeviceMappings" : [ { "DeviceName" : "/dev/xvda", "Ebs" : { "VolumeSize": 150, "VolumeType": "gp2", "DeleteOnTermination": true} },
                                  { "DeviceName" : "/dev/xvdb", "Ebs" : { "VolumeSize": 80, "VolumeType": "gp2", "DeleteOnTermination": true} } ],
        "SecurityGroups" : [ { "Ref" : "PublicSlaveSecurityGroup" } ],
        "IamInstanceProfile" : { "Ref" : "SlaveInstanceProfile" },
        "AssociatePublicIpAddress" : "true",
        "EbsOptimized": "true",
        "InstanceType" : { "Ref" : "DefaultInstanceType" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          {{ agent_public_cloud_config }}
        ]]}}
      }
    },

    "SlaveSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Slaves",
        "VpcId" : { "Ref" : "Vpc" }
      }
    },

    "MasterToSlaveIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "SlaveSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "MasterSecurityGroup" }
      }
    },
    "SlaveToMasterIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "MasterSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "SlaveSecurityGroup" }
        }
    },
    "SlaveToMasterLBIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "LbSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "2181",
        "ToPort" : "2181",
        "SourceSecurityGroupId" : { "Ref" : "SlaveSecurityGroup" }
      }
    },
    "SlaveToSlaveIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "SlaveSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "SlaveSecurityGroup" }
      }
    },
    "PublicSlaveToSlaveIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "SlaveSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "PublicSlaveSecurityGroup" }
      }
    },
    "SlaveToPublicSlaveIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "PublicSlaveSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "SlaveSecurityGroup" }
      }
    },
    "PublicSlaveToPublicSlaveIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "PublicSlaveSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "PublicSlaveSecurityGroup" }
      }
    },

    "PublicSlaveSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Public slave",
        "VpcId" : { "Ref" : "Vpc" }
      }
    },
    "MasterToPublicSlaveIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "PublicSlaveSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "MasterSecurityGroup" }
      }
    },
    "PublicSlaveToMasterIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "MasterSecurityGroup" },
        "IpProtocol" : "-1",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "PublicSlaveSecurityGroup" }
        }
    },
    "PublicSlaveIngressOne" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "PublicSlaveSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "0",
        "ToPort" : "21",
        "CidrIp" : "0.0.0.0/0"
        }
    },
    "PublicSlaveIngressTwo" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "PublicSlaveSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "23",
        "ToPort" : "5050",
        "CidrIp" : "0.0.0.0/0"
        }
    },
    "PublicSlaveIngressThree" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "PublicSlaveSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "5052",
        "ToPort" : "32000",
        "CidrIp" : "0.0.0.0/0"
        }
    },
    "PublicSlaveIngressFour" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "PublicSlaveSecurityGroup" },
        "IpProtocol" : "udp",
        "FromPort" : "0",
        "ToPort" : "21",
        "CidrIp" : "0.0.0.0/0"
        }
    },
    "PublicSlaveIngressFive" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "PublicSlaveSecurityGroup" },
        "IpProtocol" : "udp",
        "FromPort" : "23",
        "ToPort" : "5050",
        "CidrIp" : "0.0.0.0/0"
        }
    },
    "PublicSlaveIngressSix" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "PublicSlaveSecurityGroup" },
        "IpProtocol" : "udp",
        "FromPort" : "5052",
        "ToPort" : "32000",
        "CidrIp" : "0.0.0.0/0"
        }
    }
  },
  "Outputs" : {
    "DnsAddress" : {
      "Description" : "Master",
      "Value" : { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}
    },
    "PublicSlaveDnsAddress" : {
      "Description" : "Public slaves", "Value" : { "Fn::GetAtt" : [ "PublicSlaveLoadBalancer", "DNSName" ]}
    },
    "ExhibitorS3Bucket" : {
      "Description" : "Exhibitor bucket",
      "Value" : { "Ref" : "ExhibitorS3Bucket" }
    }
  }
}
