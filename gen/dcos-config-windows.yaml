package:
  - path: \bin_slave\servicelist.txt
    content: |
      dcos-adminrouter-agent.service
      dcos-diagnostics.service
      dcos-mesos-slave.service
      dcos-telegraf.service
      dcos-net.service
  - path: \bin_slave_public\servicelist.txt
    content: |
      dcos-adminrouter-agent.service
      dcos-diagnostics.service
      dcos-mesos-slave-public.service
      dcos-telegraf.service
      dcos-net.service
  - path: \pkginfo.json
    content: |
      {
        "environment": {
          "PROVIDER": "{{ provider }}"
        }
      }
  - path: \bin\detect_ip.ps1
    permissions: "0755"
    content: {{ ip_detect_contents }}
  - path: \bin\detect_ip_public.ps1
    permissions: "0755"
    content: {{ ip_detect_public_contents }}
  - path: \bin\detect_ip6.ps1
    permissions: "0755"
    content: {{ ip6_detect_contents }}
  - path: \etc\license.txt
    permissions: "0600"
    content: {{ license_key_contents }}
  - path: \etc_master\master_count
    content: |
      {{ num_masters }}
  - path: \etc_slave\dcos-dns.json
    content: |
      {
        "upstream_resolvers": {{ resolvers }},
        "bind_interface": "spartan",
        "udp_port": 53,
        "tcp_port": 53,
        "bind_ip_blacklist": {{ dns_bind_ip_blacklist_json }},
        "forward_zones": {{ dns_forward_zones }}
      }
  - path: \etc_slave_public\dcos-dns.json
    content: |
      {
        "upstream_resolvers": {{ resolvers }},
        "bind_interface": "spartan",
        "udp_port": 53,
        "tcp_port": 53,
        "bind_ip_blacklist": {{ dns_bind_ip_blacklist_json }},
        "forward_zones": {{ dns_forward_zones }}
      }
  - path: \etc\mesos-slave-common.ps1
    content: |
      $env:MESOS_MASTER="zk://zk-1.zk:2181,zk-2.zk:2181,zk-3.zk:2181,zk-4.zk:2181,zk-5.zk:2181/mesos"
      $env:MESOS_CONTAINERIZERS="docker,mesos"
      $env:MESOS_EXTERNAL_LOG_FILE="c:\var\log\mesos\mesos-agent.log"
      $env:MESOS_ISOLATION="{{ mesos_isolation }}"
      $env:MESOS_WORK_DIR="{{ mesos_agent_work_dir }}"
      $env:MESOS_SLAVE_SUBSYSTEMS="cpu,memory"
      $env:MESOS_LAUNCHER_DIR="c:\opt\mesosphere\active\mesos\bin"
      $env:MESOS_EXECUTOR_ENVIRONMENT_VARIABLES="file:///opt/mesosphere/etc/mesos-executor-environment.json"
      $env:MESOS_EXECUTOR_REGISTRATION_TIMEOUT="15mins"
      $env:MESOS_RECONFIGURATION_POLICY="additive"
      $env:MESOS_RECOVERY_TIMEOUT="{{ mesos_recovery_timeout }}"
      $env:MESOS_DISALLOW_SHARING_AGENT_PID_NAMESPACE="true"
      $env:MESOS_DOCKER_REMOVE_DELAY="{{ docker_remove_delay }}"
      $env:MESOS_DOCKER_STOP_TIMEOUT="{{ docker_stop_timeout }}"
      $env:MESOS_DOCKER_STORE_DIR="c:\var\lib\mesos\slave\store\docker"
      $env:MESOS_GC_DELAY="{{ gc_delay }}"
      $env:MESOS_HOSTNAME_LOOKUP="false"
      $env:MESOS_DEFAULT_CONTAINER_DNS="file:///opt/mesosphere/etc/mesos-slave-dns.json"
      $env:MESOS_IMAGE_GC_CONFIG="file:///opt/mesosphere/etc/mesos-slave-image-gc-config.json"
      $env:GLOG_drop_log_memory="false"
{% switch use_mesos_hooks %}
{% case "true" %}
      $env:MESOS_HOOKS="{{ mesos_hooks }}"
{% case "false" %}
{% endswitch %}
{% switch cluster_docker_registry_enabled %}
{% case "true" %}
      $env:MESOS_DOCKER_REGISTRY="{{ cluster_docker_registry_url }}"
{% case "false" %}
{% endswitch %}
{% switch cluster_docker_credentials_enabled %}
{% case "true" %}
      $env:MESOS_DOCKER_CONFIG="file://{{ cluster_docker_credentials_path }}"
{% case "false" %}
{% endswitch %}
{% switch enable_mesos_ipv6_discovery %}
{% case "false" %}
{% case "true" %}
      $env:MESOS_IP6_DISCOVERY_COMMAND="c:\opt\mesosphere\bin\detect_ip6.ps1"
{% endswitch %}
{% switch cluster_docker_credentials_dcos_owned %}
{% case "true" %}
  - path: /etc/docker_credentials
    permissions: "0600"
    content: |
        {{ cluster_docker_credentials }}
{% case "false" %}
{% endswitch %}
  - path: /etc/mesos-slave-dns.json
    content: |
      {
        "docker":
        [
            {
              "network_mode": "USER",
              "dns": {
                "nameservers": [
{% switch enable_ipv6 %}
{% case "true" %}
                                "198.51.100.1",
                                "198.51.100.2",
                                "198.51.100.3",
                                "fd01:d::c633:6401"
{% case "false" %}
                                "198.51.100.1",
                                "198.51.100.2",
                                "198.51.100.3"
{% endswitch %}
                ]
              }
            }
        ]
      }
  - path: /etc/mesos-slave-image-gc-config.json
    content: |
      {
        "image_disk_headroom": 0.1,
        "image_disk_watch_interval": {
          "nanoseconds": 300000000000
        },
        "excluded_images": []
      }
  - path: \etc\docker_credentials
    permissions: "0600"
    content: |
        {{ cluster_docker_credentials }}
  - path: \etc\mesos-slave.ps1
    content: |
      $env:MESOS_RESOURCES='[{"name":"ports","type":"RANGES","ranges": {"range": [{"begin": 1025, "end": 2180},{"begin": 2182, "end": 3887},{"begin": 3889, "end": 5049},{"begin": 5052, "end": 8079},{"begin": 8082, "end": 8180},{"begin": 8182, "end": 32000}]}}]'
      $env:MESOS_ATTRIBUTES='os:Windows'
  - path: \etc\mesos-slave-public.ps1
    content: |
      $env:MESOS_RESOURCES='[{"name":"ports","type":"RANGES","ranges": {"range": [{"begin": 1, "end": 21},{"begin": 23, "end": 5050},{"begin": 5052, "end": 32000}]}}]'
      $env:MESOS_DEFAULT_ROLE='slave_public'
      $env:MESOS_ATTRIBUTES='os:Windows;public_ip:true'
  - path: \etc\mesos-executor-environment.json
    content: |
      {
        "SHELL": "powershell.exe",
        "LIBPROCESS_NUM_WORKER_THREADS": "8"
      }
  - path: \etc\dcos-diagnostics-runner-config.json
    content: {{ check_config_contents }}
  - path: \etc\dcos-diagnostics.env.ps1
    content: |
      $env:DCOS_DIAGNOSTICS_CONFIG_PATH="c:\opt\mesosphere\etc\dcos-diagnostics-config.json"
  - path: \etc_slave\dcos-diagnostics-config.json
    content: |
      {
        "role": "agent",
        "endpoint-config": "c:\\opt\\mesosphere\\etc\\dcos-diagnostics-endpoint-config.json",
        "agent-port": 61001,
        "port": 9003,
        "no-unix-socket": true
      }
  - path: \etc_slave_public\dcos-diagnostics-config.json
    content: |
      {
        "role": "agent_public",
        "endpoint-config": "c:\\opt\\mesosphere\\etc\\dcos-diagnostics-endpoint-config.json",
        "agent-port": 61001,
        "port": 9003,
        "no-unix-socket": true
      }
  - path: \etc\dcos-diagnostics-endpoint-config.json
    content: |
        {
          "HTTPEndpoints": [
              {
                  "Port": 5050,
                  "Uri": "/__processes__",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/master/flags",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/master/frameworks",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/master/maintenance/schedule",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/master/maintenance/status",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/master/roles",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/master/slaves",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/master/state",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/master/state-summary",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/master/tasks",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/metrics/snapshot",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/registrar(1)/registry",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/system/stats.json",
                  "Role": ["master"]
              },
              {
                  "Port": 5050,
                  "Uri": "/version",
                  "Role": ["master"]
              },
              {
                  "Port": 8080,
                  "Uri": "/metrics",
                  "Role": ["master"]
              },
              {
                  "Port": 8080,
                  "Uri": "/v2/apps",
                  "Role": ["master"]
              },
              {
                  "Port": 8080,
                  "Uri": "/v2/deployments",
                  "Role": ["master"]
              },
              {
                  "Port": 8080,
                  "Uri": "/v2/groups",
                  "Role": ["master"]
              },
              {
                  "Port": 8080,
                  "Uri": "/v2/info",
                  "Role": ["master"]
              },
              {
                  "Port": 8080,
                  "Uri": "/v2/leader",
                  "Role": ["master"]
              },
              {
                  "Port": 8080,
                  "Uri": "/v2/queue",
                  "Role": ["master"]
              },
              {
                  "Port": 8080,
                  "Uri": "/v2/tasks",
                  "Role": ["master"]
              },
              {
                  "Port": 8181,
                  "Uri": "/exhibitor/v1/cluster/list",
                  "Role": ["master"]
              },
              {
                  "Port": 8181,
                  "Uri": "/exhibitor/v1/cluster/log",
                  "Role": ["master"]
              },
              {
                  "Port": 8181,
                  "Uri": "/exhibitor/v1/cluster/state",
                  "Role": ["master"]
              },
              {
                  "Port": 8181,
                  "Uri": "/exhibitor/v1/cluster/status",
                  "Role": ["master"]
              },
              {
                  "Port": 8181,
                  "Uri": "/exhibitor/v1/config/get-state",
                  "Role": ["master"]
              },
              {
                  "Port": 5051,
                  "Uri": "/__processes__",
                  "Role":["agent", "agent_public"]
              },
              {
                  "Port": 5051,
                  "Uri": "/metrics/snapshot",
                  "Role":["agent", "agent_public"]
              },
              {
                  "Port": 5051,
                  "Uri": "/flags",
                  "Role":["agent", "agent_public"]
              },
              {
                  "Port": 5051,
                  "Uri": "/state",
                  "Role":["agent", "agent_public"]
              },
              {
                  "Port": 5051,
                  "Uri": "/system/stats.json",
                  "Role":["agent", "agent_public"]
              },
              {
                  "Port": 8123,
                  "Uri": "/v1/config",
                  "Role": ["master"]
              },
              {
                  "Port": 8123,
                  "Uri": "/v1/version",
                  "Role": ["master"]
              }
          ],
          "LocalFiles": [
              {
                  "Location": "c:\\opt\\mesosphere\\active.buildinfo.full.json"
              },
              {
                  "Location": "c:\\opt\\mesosphere\\etc\\dcos-version.json"
              },
              {
                  "Location": "c:\\opt\\mesosphere\\etc\\expanded.config.json"
              },
              {
                  "Location": "c:\\opt\\mesosphere\\etc\\user.config.yaml"
              },
              {
                  "Location": "c:\\var\\lib\\dcos\\cluster-id"
              },
              {
                  "Location": "c:\\var\\lib\\dcos\\exhibitor\\zookeeper\\snapshot\\myid",
                  "Role": ["master"]
              },
              {
                  "Location": "c:\\var\\lib\\dcos\\exhibitor\\conf\\zoo.cfg",
                  "Role": ["master"]
              }
          ],
          "LocalCommands": [
              {
                  "Command": ["dmesg"]
              }
          ]
        }
  - path: \etc\master_list
    content: |
      {{ master_list }}
  - path: \etc\extra_master_addresses
    content: |
  - path: \etc\user.config.yaml
    content: |
{{ config_yaml }}
  - path: \etc\user.config.full.yaml
    permissions: "0600"
    content: |
{{ config_yaml_full }}
  - path: \etc\expanded.config.json
    content: |
{{ expanded_config }}
  - path: \etc\expanded.config.full.json
    permissions: "0600"
    content: |
{{ expanded_config_full }}
{% switch fault_domain_enabled %}
{% case "true" %}
  - path: \bin\detect_fault_domain
    permissions: "0755"
    content: {{ fault_domain_detect_contents }}
{% case "false" %}
{% endswitch %}
  - path: \etc\proxy.env.ps1
{% switch use_proxy %}
{% case "true" %}
    content: |
      $env:http_proxy="{{ http_proxy }}"
      $env:https_proxy="{{ https_proxy }}"
      $env:no_proxy="{{ no_proxy_final }}"
{% case "false" %}
    content: ""
{% endswitch %}
  - path: /etc/dcos-net.config.d/common.config
    content: |
      [
        {dcos_dns,
          [
            {udp_port, 53},
            {tcp_port, 53},
            {bind_ips, [{198, 51, 100, 1}, {198, 51, 100, 2}, {198, 51, 100, 3}]}
          ]
        },
        {dcos_net,
          [
            {dist_port, 62501},
            {epmd_port, 61420}
          ]
        },
        {dcos_l4lb,
          [
            {enable_lb, false},
            {enable_networking, false}
          ]
        },
        {dcos_overlay,
          [
            {enable_overlay, false}
          ]
        },
        {dcos_rest,
          [
            {enable_rest, {{ dcos_net_rest_enable }}}
          ]
        },
        {telemetry,
          [
            {forward_metrics, false}
          ]
        }
      ].
  - path: /etc/sys.config.windows
    content: |
      [
        {dcos_net, [
          {config_dir, "c:\\opt\\mesosphere\\etc\\dcos-net.config.d"},
          {is_master, false}
        ]},
        {dcos_dns, [
          {mesos_resolvers, []},
          {upstream_resolvers, [DCOS_NET_UPSTREAM_RESOLVERS]},
          {exhibitor_url, "http://master.mesos:8181/exhibitor/v1/cluster/status"}
        ]},
        {erldns, [
          {servers, [[
            {name, inet_localhost_1},
            {address, "127.0.0.1"},
            {port, 62053},
            {family, inet},
            {processes, 1}
          ]]},
          {use_root_hints, false},
          {catch_exceptions, false},
          {zones, "c:\\opt\\mesosphere\\active\\dcos-net\\dcos-net\\data\\zones.json"},
          {pools, []}
        ]},
        {lashup, [
          {work_dir, "c:\\var\\lib\\dcos\\navstar\\lashup"}
        ]},
        {mnesia, [
          {dir, "c:\\var\\lib\\dcos\\navstar\\mnesia"},
          {dump_log_write_threshold, 10}
        ]},
        {telemetry, [
          {is_aggregator, false},
          {forward_metrics, false},
          {receive_metrics, false},
          {interval_seconds, 60},
          {splay_seconds, 20}
        ]},
        {kernel, [
          {start_pg2, true},
          {start_timer, true}
        ]},
        {lager, [
          {error_logger_hwm, 1000},
          {async_threshold, 1000},
          {log_root, "c:\\opt\\mesosphere\\active\\dcos-net\\dcos-net"},
          {handlers, [
            {lager_console_backend, [
              {level, notice}
            ]},
            {lager_file_backend, [
              {file, "log\\error.log"},
              {level, notice},
              {formatter, lager_default_formatter},
              {formatter_config, [
                date, " ",
                time, " ",
                "[", severity, "] ",
                {pid, ""},
                {module, [
                  {pid, ["@"], ""},
                  module,
                  {function, [":", function], ""},
                  {line, [":",line], ""}
                ], ""},
                " ", message, "\n"
              ]}
            ]}
          ]}
        ]},
        {sasl, [
          {sasl_error_logger, {file, "c:\\opt\\mesosphere\\active\\dcos-net\\dcos-net\\log\\sasl.log"}},
          {errlog_type, error},
          {error_logger_mf_dir, "c:\\opt\\mesosphere\\active\\dcos-net\\dcos-net\\log\\sasl"},   % Log directory
          {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
          {error_logger_mf_maxfiles, 5}   % 5 files max
        ]}
      ].
  - path: /etc/vm.args.windows
    content: |
      -name navstar@DCOS_AGENT_PRIVATE_IP
      -setcookie minuteman
      -env ERL_MAX_PORTS 16384
      +P 256000
      +C multi_time_warp
      +c true
      -connect_all false
      +t 4194304
      -stbt nnts
      +SDio 4

      # This file MUST have extra new lines at the end

  - path: \etc\telegraf\telegraf.conf.windows
    content: |
      # Telegraf config for all nodes
      [global_tags]
        # Tags to be applied to all metrics.
        dcos_cluster_name="{{ cluster_name }}"
        dcos_cluster_id="DCOS_CURRENT_CLUSTER_ID"
      [agent]
        ## Default data collection interval for all inputs
        interval = "10s"
        ## Rounds collection interval to 'interval'
        ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
        round_interval = true
        ## Telegraf will send metrics to outputs in batches of at most
        ## metric_batch_size metrics.
        ## This controls the size of writes that Telegraf sends to output plugins.
        metric_batch_size = 1000
        ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
        ## output, and will flush this buffer on a successful write. Oldest metrics
        ## are dropped first when this buffer fills.
        ## This buffer only fills when writes fail to output plugin(s).
        metric_buffer_limit = 10000
        ## Collection jitter is used to jitter the collection by a random amount.
        ## Each plugin will sleep for a random time within jitter before collecting.
        ## This can be used to avoid many plugins querying things like sysfs at the
        ## same time, which can have a measurable effect on the system.
        collection_jitter = "0s"
        ## Default flushing interval for all outputs. You shouldn't set this below
        ## interval. Maximum flush_interval will be flush_interval + flush_jitter
        flush_interval = "10s"
        ## Jitter the flush interval by a random amount. This is primarily to avoid
        ## large write spikes for users running a large number of telegraf instances.
        ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
        flush_jitter = "0s"
        ## By default or when set to "0s", precision will be set to the same
        ## timestamp order as the collection interval, with the maximum being 1s.
        ##   ie, when interval = "10s", precision will be "1s"
        ##       when interval = "250ms", precision will be "1ms"
        ## Precision will NOT be used for service inputs. It is up to each individual
        ## service input to set the timestamp at the appropriate precision.
        ## Valid time units are "ns", "us", "ms", "s".
        precision = ""
        ## Logging configuration:
        ## Run telegraf with debug log messages.
        debug = false
        ## Run telegraf in quiet mode (error log messages only).
        quiet = false
        ## Specify the log file name. The empty string means to log to stderr.
        logfile = ""
        ## Override default hostname, if empty use os.Hostname()
        hostname = ""
        ## If set to true, do no set the "host" tag in the telegraf agent.
        omit_hostname = false
      # Read metrics about cpu usage
      [[inputs.cpu]]
        ## Whether to report per-cpu stats or not
        percpu = true
        ## Whether to report total system cpu stats or not
        totalcpu = true
        ## If true, collect raw CPU time metrics.
        collect_cpu_time = false
        ## If true, compute and report the sum of all non-idle CPU states.
        report_active = false
      # Read metrics about memory usage
      [[inputs.mem]]
      # Read metrics about disk usage by mount point
      [[inputs.disk]]
        ## Ignore mount points by filesystem type.
        # TODO(branden): Do we want to ignore any fs types?
        #ignore_fs = ["tmpfs", "devtmpfs", "devfs"]
      # Read metrics about swap memory usage
      [[inputs.swap]]
      # Gather metrics about network interfaces
      [[inputs.net]]
      # TODO(ibalutoiu): The following input filter is not implemented on Windows.
      #                  It will be replaced by a similar input filter using
      #                  the Windows performance counters.
      # Get the number of processes and group them by status
      #[[inputs.processes]]
      #
      # Read metrics about system load & uptime
      [[inputs.system]]
      # Configuration for the Prometheus client to spawn
      [[outputs.prometheus_client]]
        ## Address to listen on
        listen = ":61091"
  - path: \etc\telegraf\telegraf.d\agent.conf.windows
    content: |
      # Additional Telegraf config for agents
      # Plugin for monitoring statsd metrics from mesos tasks
      [[inputs.dcos_statsd]]
        ## The address on which the command API should listen
        listen = "localhost:9004"
        ## The directory in which container information is stored
        containers_dir = "c:/run/dcos/telegraf/dcos_statsd/containers"
        ## The period after which requests to the API should time out
        timeout = "15s"
        ## The hostname or IP address on which to host statsd servers
        statsd_host = "198.51.100.1"
      # Plugin for adding metadata to dcos-specific metrics
      [[processors.dcos_metadata]]
        ## The URL of the local mesos agent
        mesos_agent_url = "http://DCOS_AGENT_PRIVATE_IP:5051"
        ## The period after which requests to mesos agent should time out
        timeout = "10s"
        ## The minimum period between requests to the mesos agent
        rate_limit = "5s"
      # Expose metrics via the dcos-metrics v0 API.
      [[outputs.dcos_metrics]]
        # The address on which the dcos-metrics v0 API should listen
        listen = "localhost:9000"
        dcos_node_role = "agent"
        # Duration to cache metrics in memory.
        cache_expiry = "2m"
        # DC/OS node's private IP, as reported by c:/opt/mesosphere/bin/detect_ip.ps1.
        dcos_node_private_ip = "DCOS_AGENT_PRIVATE_IP"
        # Global DC/OS Cluster ID.
        dcos_cluster_id = "DCOS_CURRENT_CLUSTER_ID"
  - path: /etc/check_time.env.ps1
    content: |
      $env:ENABLE_CHECK_TIME="{{ check_time }}"
  - path: /etc/dcos_net.ps1
    content: |
      $env:DCOS_NET_WATCHDOG="{{ dcos_net_watchdog }}"
      $env:DCOS_NET_IPV6="{{ enable_ipv6 }}"
  - path: /etc/dns_config.ps1
    content: |
      $env:MASTER_SOURCE="master_list"
      $env:RESOLVERS="{{ resolvers_str }}"
      $env:ERL_FLAGS="-epmd_module dcos_net_epmd -start_epmd false -no_epmd -proto_dist dcos_net"
  - path: /etc/dns_search_config.ps1
    content: |
      {{ dcos_gen_resolvconf_search_str }}
