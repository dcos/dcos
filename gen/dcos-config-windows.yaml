package:
  - path: {{ windows_dcos_install_path }}\etc\pkginfo.json
    content: |
      {
        "environment": {
          "MESOS_IP_DISCOVERY_COMMAND": "{{ windows_dcos_install_path_json }}\\bin\\detect_ip.ps1",
          "PROVIDER": "{{ provider }}"
        }
      }
  - path: {{ windows_dcos_install_path }}\etc\check_time.env
    content: |
        ENABLE_CHECK_TIME=true

  # Config for dcos-diagnostics
  - path: {{ windows_dcos_install_path }}\etc\dcos-diagnostics\dcos-diagnostics-config.json
    content: |
      {
        "role": "agent",
        "endpoint-config": "{{ windows_dcos_install_path_json }}\\etc\\dcos-diagnostics\\dcos-diagnostics-endpoint-config.json",
        "agent-port": 61001,
        "port": 1050,
        "no-unix-socket": true
      }
  - path: {{ windows_dcos_install_path }}\etc\dcos-diagnostics\dcos-diagnostics-endpoint-config.json
    content: |
      {
        "HTTPEndpoints": [
            {
                "Port": 5051,
                "Uri": "/overlay-agent/overlay",
                "Role": ["agent"]
            },
            {
                "Port": 5051,
                "Uri": "/__processes__",
                "Role": [ "agent" ]
            },
            {
                "Port": 5051,
                "Uri": "/metrics/snapshot",
                "Role": [ "agent" ]
            },
            {
                "Port": 5051,
                "Uri": "/flags",
                "Role": [ "agent" ]
            },
            {
                "Port": 5051,
                "Uri": "/state",
                "Role": [ "agent" ]
            },
            {
                "Port": 5051,
                "Uri": "/system/stats.json",
                "Role": [ "agent" ]
            },
            {
                "Port": 5051,
                "Uri": "/containers",
                "Role": [ "agent" ]
            }
        ],
        "LocalFiles": [
            {
                "Location": "{{ windows_dcos_var_path_json }}\\mesos\\mesos-agent.log",
                "Role": [ "agent" ]
            }
        ],
        "LocalCommands": [
        ]
      }

  # Config for Telegraf
  - path: {{ windows_dcos_install_path }}\etc\telegraf\telegraf.conf
    content: |
      [agent]
        ## Default data collection interval for all inputs
        interval = "10s"
        ## Rounds collection interval to 'interval'
        ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
        round_interval = true
        ## Telegraf will send metrics to outputs in batches of at most
        ## metric_batch_size metrics.
        ## This controls the size of writes that Telegraf sends to output plugins.
        metric_batch_size = 1000
        ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
        ## output, and will flush this buffer on a successful write. Oldest metrics
        ## are dropped first when this buffer fills.
        ## This buffer only fills when writes fail to output plugin(s).
        metric_buffer_limit = 90000
        ## Collection jitter is used to jitter the collection by a random amount.
        ## Each plugin will sleep for a random time within jitter before collecting.
        ## This can be used to avoid many plugins querying things like sysfs at the
        ## same time, which can have a measurable effect on the system.
        collection_jitter = "0s"
        ## Default flushing interval for all outputs. You shouldn't set this below
        ## interval. Maximum flush_interval will be flush_interval + flush_jitter
        flush_interval = "10s"
        ## Jitter the flush interval by a random amount. This is primarily to avoid
        ## large write spikes for users running a large number of telegraf instances.
        ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
        flush_jitter = "0s"
        ## By default or when set to "0s", precision will be set to the same
        ## timestamp order as the collection interval, with the maximum being 1s.
        ##   ie, when interval = "10s", precision will be "1s"
        ##       when interval = "250ms", precision will be "1ms"
        ## Precision will NOT be used for service inputs. It is up to each individual
        ## service input to set the timestamp at the appropriate precision.
        ## Valid time units are "ns", "us", "ms", "s".
        precision = ""
        ## Logging configuration:
        ## Run telegraf with debug log messages.
        debug = false
        ## Run telegraf in quiet mode (error log messages only).
        quiet = false
        ## Specify the log file name. The empty string means to log to stderr.
        logfile = ""
        ## Override default hostname, if empty use os.Hostname()
        hostname = ''
        ## If set to true, do no set the "host" tag in the telegraf agent.
        omit_hostname = false
      # Read metrics about cpu usage
      [[inputs.cpu]]
        ## Whether to report per-cpu stats or not
        percpu = false
        ## Whether to report total system cpu stats or not
        totalcpu = true
        ## If true, collect raw CPU time metrics.
        collect_cpu_time = false
        ## If true, compute and report the sum of all non-idle CPU states.
        report_active = false
      # Read metrics about memory usage
      [[inputs.mem]]
      # Read metrics about disk usage by mount point
      [[inputs.disk]]
        ## Ignore mount points by filesystem type.
        # TODO(branden): Do we want to ignore any fs types?
        #ignore_fs = ["tmpfs", "devtmpfs", "devfs"]
      # Read metrics about swap memory usage
      [[inputs.swap]]
      # Gather metrics about network interfaces
      [[inputs.net]]
      # Get the number of processes and group them by status
      [[inputs.win_perf_counters]]
      # Read metrics about system load & uptime
      [[inputs.system]]
      # Collect statistics about itself
      [[inputs.internal]]
        ## If true, collect telegraf memory stats.
        collect_memstats = true

           [[inputs.win_perf_counters.object]]
              ObjectName = "Processor"
              Instances = ["*"]
              Counters = [
                "% Idle Time",
                "% Interrupt Time",
                "% Privileged Time",
                "% User Time",
                "% Processor Time",
                "% DPC Time",
              ]
              Measurement = "win_cpu"
              IncludeTotal=true

           [[inputs.win_perf_counters.object]]
              ObjectName = "Diagnostics"
              Instances = ["*"]
              Counters = [
                "Elapsed Time",
                "% Processor Time",
              ]
              Measurement = "dcos_diagnostics"


      [[inputs.docker]]
         endpoint = "ENV"

      [[inputs.mesos]]

        timeout = 100
         slaves = ["http://$DCOS_NODE_PRIVATE_IP:5051"]
         slave_collections = [
           "resources",
           "agent",
           "system",
           "executors",
           "tasks",
           "messages",
      ]

      [[outputs.prometheus_client]]
        ## Address to listen on
        listen = ":61091"
        ## Expiration interval for each metric before it's evicted from cache.
        expiration_interval = "60s"
      # Read metrics from DC/OS Net Prometheus endpoint.
  - path: {{ windows_dcos_install_path }}\etc\mesos\domain.json
    content: |
      {
        "fault_domain":
          {
            "region":
              {
                "name": "windows"
              },
            "zone":
              {
                "name": "windows"
              }
          }
      }

